var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ts = require("typescript");
var stream = require("stream");
var fs = require("fs");
var chalk = require("chalk");
var path = require("path");
var chokidar = require("chokidar");
exports.a = {
    none: 0,
    info: 1,
    warn: 2,
    error: 3
};
var Logger = (function () {
    function Logger() {
    }
    Logger.setLevel = function (a) {
        this.b = a;
    };
    Logger.setName = function (a) {
        this.c = a;
    };
    Logger.log = function () {
        var a = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            a[_i - 0] = arguments[_i];
        }
        console.log.apply(console, [chalk.gray("[" + this.c + "]")].concat(a));
    };
    Logger.info = function () {
        var d = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            d[_i - 0] = arguments[_i];
        }
        if (this.b < exports.a.info) {
            return;
        }
        console.log.apply(console, [chalk.gray(("[" + this.c + "]") + chalk.blue(" INFO: "))].concat(d));
    };
    Logger.warn = function () {
        var d = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            d[_i - 0] = arguments[_i];
        }
        if (this.b < exports.a.warn) {
            return;
        }
        console.log.apply(console, [("[" + this.c + "]") + chalk.yellow(" WARNING: ")].concat(d));
    };
    Logger.error = function () {
        var d = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            d[_i - 0] = arguments[_i];
        }
        if (this.b < exports.a.error) {
            return;
        }
        console.log.apply(console, [("[" + this.c + "]") + chalk.red(" ERROR: ")].concat(d));
    };
    Logger.b = exports.a.none;
    Logger.c = "logger";
    return Logger;
})();
exports.Logger = Logger;
var TsCore;
(function (TsCore) {
    function fileExtensionIs(a, b) {
        var c = a.length;
        var d = b.length;
        return c > d && a.substr(c - d, d) === b;
    }
    TsCore.fileExtensionIs = fileExtensionIs;
    TsCore.a = [".ts", ".tsx", ".d.ts"];
    TsCore.b = TsCore.a;
    function isSupportedSourceFileName(b) {
        if (!b) {
            return false;
        }
        for (var _i = 0; _i < TsCore.a.length; _i++) {
            var c = TsCore.a[_i];
            if (fileExtensionIs(b, c)) {
                return true;
            }
        }
        return false;
    }
    TsCore.isSupportedSourceFileName = isSupportedSourceFileName;
    function getExternalModuleName(a) {
        if (a.kind === 222) {
            return a.moduleSpecifier;
        }
        if (a.kind === 221) {
            var b = a.moduleReference;
            if (b.kind === 232) {
                return b.expression;
            }
        }
        if (a.kind === 228) {
            return a.moduleSpecifier;
        }
    }
    TsCore.getExternalModuleName = getExternalModuleName;
    function createDiagnostic(a) {
        var b = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            b[_i - 1] = arguments[_i];
        }
        var c = a.key;
        if (arguments.length > 1) {
            c = formatStringFromArgs(c, arguments, 1);
        }
        return {
            file: undefined,
            start: undefined,
            length: undefined,
            messageText: c,
            category: a.category,
            code: a.code
        };
    }
    TsCore.createDiagnostic = createDiagnostic;
    function formatStringFromArgs(a, b, c) {
        c = c || 0;
        return a.replace(/{(\d+)}/g, function (a, d) {
            return b[+d + c];
        });
    }
    function isDeclarationFile(a) {
        return (a.flags & 8192) !== 0;
    }
    TsCore.isDeclarationFile = isDeclarationFile;
    function isAliasSymbolDeclaration(a) {
        return a.kind === 221 || a.kind === 223 && !!a.name || a.kind === 224 || a.kind === 226 || a.kind === 230 || a.kind === 227 && a.expression.kind === 69;
    }
    TsCore.isAliasSymbolDeclaration = isAliasSymbolDeclaration;
    function normalizeSlashes(a) {
        return a.replace(/\\/g, "/");
    }
    TsCore.normalizeSlashes = normalizeSlashes;
    function outputExtension(a) {
        return a.replace(/\.ts/, ".js");
    }
    TsCore.outputExtension = outputExtension;
})(TsCore = exports.TsCore || (exports.TsCore = {}));
var Utils;
(function (Utils) {
    function forEach(a, b) {
        if (a) {
            for (var i = 0, c = a.length; i < c; i++) {
                var d = b(a[i], i);
                if (d) {
                    return d;
                }
            }
        }
        return undefined;
    }
    Utils.forEach = forEach;
    function contains(a, b) {
        if (a) {
            for (var _i = 0; _i < a.length; _i++) {
                var v = a[_i];
                if (v === b) {
                    return true;
                }
            }
        }
        return false;
    }
    Utils.contains = contains;
    var a = Object.prototype.hasOwnProperty;
    function hasProperty(b, c) {
        return a.call(b, c);
    }
    Utils.hasProperty = hasProperty;
    function clone(a) {
        var b = {};
        for (var c in a) {
            b[c] = a[c];
        }
        return b;
    }
    Utils.clone = clone;
    function map(a, f) {
        var b;
        if (a) {
            b = [];
            for (var _i = 0; _i < a.length; _i++) {
                var v = a[_i];
                b.push(f(v));
            }
        }
        return b;
    }
    Utils.map = map;
    function extend(a, b) {
        var c = 1;
        var d = {};
        for (var c in a) {
            d[c] = a[c];
        }
        for (var e in b) {
            if (!hasProperty(d, e)) {
                d[e] = b[e];
            }
        }
        return d;
    }
    Utils.extend = extend;
    function replaceAt(a, b, c) {
        return a.substr(0, b) + c + a.substr(b + c.length);
    }
    Utils.replaceAt = replaceAt;
})(Utils = exports.Utils || (exports.Utils = {}));
var File = require("vinyl");
var CompilerResult = (function () {
    function CompilerResult(c, d) {
        this.a = c;
        this.b = d;
    }
    CompilerResult.prototype.getErrors = function () {
        return this.b;
    };
    CompilerResult.prototype.getStatus = function () {
        return this.a;
    };
    CompilerResult.prototype.succeeded = function () {
        return (this.a === ts.ExitStatus.Success);
    };
    return CompilerResult;
})();
exports.CompilerResult = CompilerResult;
var CachingCompilerHost = (function () {
    function CachingCompilerHost(a) {
        var _this = this;
        this.a = {};
        this.b = {};
        this.c = 0;
        this.d = {};
        this.e = 0;
        this.f = {};
        this.getSourceFile = this.getSourceFileImpl;
        this.fileExists = function (a) {
            a = _this.getCanonicalFileName(a);
            if (!_this.dirExists(path.dirname(a))) {
                return false;
            }
            if (Utils.hasProperty(_this.d, a)) {
                return _this.d[a];
            }
            _this.e++;
            return _this.d[a] = _this.g.fileExists(a);
        };
        this.compilerOptions = a;
        this.g = ts.createCompilerHost(this.compilerOptions);
    }
    CachingCompilerHost.prototype.getOutput = function () {
        return this.a;
    };
    CachingCompilerHost.prototype.getSourceFileImpl = function (a, b, c) {
        return this.g.getSourceFile(a, b, c);
    };
    CachingCompilerHost.prototype.writeFile = function (b, c, d, e) {
        this.a[b] = c;
    };
    CachingCompilerHost.prototype.readFile = function (a) {
        if (Utils.hasProperty(this.f, a)) {
            return this.f[a];
        }
        return this.f[a] = this.g.readFile(a);
    };
    CachingCompilerHost.prototype.getDefaultLibFileName = function (a) {
        return this.g.getDefaultLibFileName(a);
    };
    CachingCompilerHost.prototype.getCurrentDirectory = function () {
        return this.g.getCurrentDirectory();
    };
    CachingCompilerHost.prototype.getCanonicalFileName = function (a) {
        return this.g.getCanonicalFileName(a);
    };
    CachingCompilerHost.prototype.useCaseSensitiveFileNames = function () {
        return this.g.useCaseSensitiveFileNames();
    };
    CachingCompilerHost.prototype.getNewLine = function () {
        return this.g.getNewLine();
    };
    CachingCompilerHost.prototype.dirExists = function (a) {
        if (Utils.hasProperty(this.b, a)) {
            return this.b[a];
        }
        this.c++;
        return this.b[a] = ts.sys.directoryExists(a);
    };
    return CachingCompilerHost;
})();
exports.CachingCompilerHost = CachingCompilerHost;
var CompileStream = (function (_super) {
    __extends(CompileStream, _super);
    function CompileStream(a) {
        _super.call(this, { objectMode: true });
    }
    CompileStream.prototype._read = function () {
    };
    return CompileStream;
})(stream.Readable);
exports.CompileStream = CompileStream;
var StatisticsReporter = (function () {
    function StatisticsReporter() {
    }
    StatisticsReporter.prototype.reportTitle = function (a) {
        Logger.log(a);
    };
    StatisticsReporter.prototype.reportValue = function (a, b) {
        Logger.log(this.b(a + ":", 25) + chalk.magenta(this.a(b.toString(), 10)));
    };
    StatisticsReporter.prototype.reportCount = function (a, b) {
        this.reportValue(a, "" + b);
    };
    StatisticsReporter.prototype.reportTime = function (a, b) {
        this.reportValue(a, (b / 1000).toFixed(2) + "s");
    };
    StatisticsReporter.prototype.reportPercentage = function (a, b) {
        this.reportValue(a, b.toFixed(2) + "%");
    };
    StatisticsReporter.prototype.a = function (s, b) {
        while (s.length < b) {
            s = " " + s;
        }
        return s;
    };
    StatisticsReporter.prototype.b = function (s, a) {
        while (s.length < a) {
            s = s + " ";
        }
        return s;
    };
    return StatisticsReporter;
})();
exports.StatisticsReporter = StatisticsReporter;
var TsVinylFile = (function (_super) {
    __extends(TsVinylFile, _super);
    function TsVinylFile(a) {
        _super.call(this, a);
    }
    return TsVinylFile;
})(File);
exports.TsVinylFile = TsVinylFile;
var BundleParser = (function () {
    function BundleParser() {
    }
    BundleParser.prototype.parseConfigFile = function (a, b) {
        var c = [];
        return {
            bundles: getBundles(),
            errors: c
        };
        function getBundles() {
            var d = [];
            var e = a["bundles"];
            if (e) {
                Logger.info(e);
                for (var f in e) {
                    Logger.info("Bundle Id: ", f, e[f]);
                    var g = e[f];
                    var h;
                    var i = [];
                    var j = {};
                    h
                        = path.join(b, f);
                    if (Utils.hasProperty(g, "files")) {
                        if (g["files"] instanceof Array) {
                            i = Utils.map(g["files"], function (s) { return path.join(b, s); });
                            Logger.info("bundle files: ", i);
                        }
                        else {
                            c.push(TsCore.createDiagnostic({ code: 6063, category: ts.DiagnosticCategory.Error, key: "Bundle '{0}' files is not an array." }, f));
                        }
                    }
                    else {
                        c.push(TsCore.createDiagnostic({ code: 6062, category: ts.DiagnosticCategory.Error, key: "Bundle '{0}' requires an array of files." }, f));
                    }
                    if (Utils.hasProperty(g, "config")) {
                        j = g.config;
                    }
                    d
                        .push({ name: h, fileNames: i, config: j });
                }
            }
            return d;
        }
    };
    return BundleParser;
})();
exports.BundleParser = BundleParser;
var Compiler = (function () {
    function Compiler(e, f, g) {
        this.e = 0;
        this.f = 0;
        this.g = 0;
        this.a = e;
        this.b = f;
        this.c = g;
        this.d = this.b.getCompilerOptions();
    }
    Compiler.prototype.compile = function (h) {
        this.g = this.e = new Date().getTime();
        Logger.log("Compiling project files...");
        var i = ts.getPreEmitDiagnostics(this.b);
        if (this.d.noEmitOnError && i.length > 0) {
            return new CompilerResult(ts.ExitStatus.DiagnosticsPresent_OutputsSkipped, i);
        }
        this.e = new Date().getTime() - this.e;
        if (!this.d.noEmit) {
            var h = new Date().getTime();
            var j = this.b.emit();
            this.f = new Date().getTime() - h;
            i
                = i.concat(j.diagnostics);
            if (j.emitSkipped) {
                return new CompilerResult(ts.ExitStatus.DiagnosticsPresent_OutputsSkipped, i);
            }
            var k = this.a.getOutput();
            for (var l in k) {
                var m = k[l];
                var n = new TsVinylFile({
                    path: l,
                    contents: new Buffer(m)
                });
                this.c.push(n);
            }
        }
        this.g = new Date().getTime() - this.g;
        if (i.length > 0) {
            return new CompilerResult(ts.ExitStatus.DiagnosticsPresent_OutputsGenerated, i);
        }
        if (this.d.diagnostics) {
            this.h();
        }
        return new CompilerResult(ts.ExitStatus.Success);
    };
    Compiler.prototype.h = function () {
        var a = new StatisticsReporter();
        a
            .reportCount("Files", this.b.getSourceFiles().length);
        a.reportCount("Lines", this.i());
        a.reportTime("Pre-emit time", this.e);
        a.reportTime("Emit time", this.f);
        a.reportTime("Compile time", this.g);
    };
    Compiler.prototype.i = function () {
        var _this = this;
        var a = 0;
        Utils.forEach(this.b.getSourceFiles(), function (b) {
            if (!TsCore.isDeclarationFile(b)) {
                a += _this.j(b).length;
            }
        });
        return a;
    };
    Compiler.prototype.j = function (a) {
        return a.getLineStarts();
    };
    return Compiler;
})();
exports.Compiler = Compiler;
var WatchCompilerHost = (function (_super) {
    __extends(WatchCompilerHost, _super);
    function WatchCompilerHost(a, c) {
        var _this = this;
        _super.call(this, a);
        this.getSourceFile = function (b, c, d) {
            if (_this.a) {
                var c_1 = _this.a.getSourceFile(b);
                if (c_1 && c_1.fileWatcher) {
                    return c_1;
                }
            }
            var e = _super.prototype.getSourceFileImpl.call(_this, b, c, d);
            if (e && _this.compilerOptions.watch) {
                e.fileWatcher = chokidar.watch(e.fileName);
                e.fileWatcher.on("change", function (a, c) { return _this.b(e, a, c); });
            }
            return e;
        };
        this.b = c;
    }
    WatchCompilerHost.prototype.setReuseableProgram = function (b) {
        this.a = b;
    };
    return WatchCompilerHost;
})(CachingCompilerHost);
exports.WatchCompilerHost = WatchCompilerHost;
var _ = require("lodash");
var fileGlob = require("glob");
var Glob = (function () {
    function Glob() {
    }
    Glob.prototype.hasPattern = function (a) {
        var g = new fileGlob.Glob(a);
        var b = g.minimatch.set;
        if (b.length > 1)
            return true;
        for (var j = 0; j < b[0].length; j++) {
            if (typeof b[0][j] !== 'string')
                return true;
        }
        return false;
    };
    Glob.prototype.expand = function (a, b) {
        if (a.length === 0) {
            return [];
        }
        var c = this.a(a, function (a) {
            return fileGlob.sync(a, { root: b });
        });
        return c;
    };
    Glob.prototype.a = function (b, c) {
        var d = [];
        _.flatten(b).forEach(function (b) {
            var e;
            var a;
            e
                = _.isString(b) && b.indexOf("!") === 0;
            if (e) {
                b = b.slice(1);
            }
            a
                = c(b);
            if (e) {
                return d = _.difference(d, a);
            }
            else {
                return d = _.union(d, a);
            }
        });
        return d;
    };
    return Glob;
})();
exports.Glob = Glob;
var BundleResult = (function () {
    function BundleResult(d, e, f) {
        this.a = d;
        this.b = e;
        this.c = f;
    }
    BundleResult.prototype.getBundleSource = function () {
        return this.c;
    };
    BundleResult.prototype.getErrors = function () {
        return this.b;
    };
    BundleResult.prototype.getStatus = function () {
        return this.a;
    };
    BundleResult.prototype.succeeded = function () {
        return (this.a === ts.ExitStatus.Success);
    };
    return BundleResult;
})();
exports.BundleResult = BundleResult;
var DependencyBuilder = (function () {
    function DependencyBuilder(d, e) {
        this.d = {};
        this.a = d;
        this.b = e;
        this.c = this.b.getCompilerOptions();
    }
    DependencyBuilder.prototype.getSourceFileDependencies = function (b) {
        var c = this;
        var d = {};
        var e = {};
        function walkModuleImports(a) {
            a.forEach(function (b) {
                var f = c.e(b);
                var g = c.f(f);
                var h = c.a.getCanonicalFileName(g.fileName);
                Logger.info("Import symbol file name: ", h);
                if (!Utils.hasProperty(e, h)) {
                    e[h] = true;
                    walkModuleImports(c.getImportsOfModule(g));
                }
                if (!Utils.hasProperty(d, h)) {
                    Logger.info("Adding module import dependencies for file: ", h);
                    d[h] = c.getImportsOfModule(g);
                }
            });
        }
        var f = c.getImportsOfModule(b);
        walkModuleImports(f);
        var g = c.a.getCanonicalFileName(b.fileName);
        if (!Utils.hasProperty(d, g)) {
            Logger.info("Adding top level import dependencies for file: ", g);
            d[g] = f;
        }
        return d;
    };
    DependencyBuilder.prototype.getImportsOfModule = function (a) {
        var b = [];
        var c = this;
        function getImports(a) {
            ts.forEachChild(a, function (d) {
                if (d.kind === 222 || d.kind === 221 || d.kind === 228) {
                    Logger.info("Found import declaration");
                    var e = TsCore.getExternalModuleName(d);
                    if (e && e.kind === 9) {
                        var f = c.b.getTypeChecker().getSymbolAtLocation(e);
                        if (f) {
                            Logger.info("Adding import symbol: ", f.name, a.fileName);
                            b.push(d);
                        }
                        else {
                            Logger.warn("Module symbol not found");
                        }
                    }
                }
                else if (d.kind === 218 && d.name.kind === 9 && (d.flags & 2 || TsCore.isDeclarationFile(a))) {
                    var g = d;
                    Logger.info("Processing ambient module declaration: ", g.name.text);
                    getImports(d.body);
                }
            });
        }
        ;
        getImports(a);
        return b;
    };
    DependencyBuilder.prototype.isExternalModuleImportEqualsDeclaration = function (a) {
        return a.kind === 221 && a.moduleReference.kind === 232;
    };
    DependencyBuilder.prototype.getExternalModuleImportEqualsDeclarationExpression = function (a) {
        return a.moduleReference.expression;
    };
    DependencyBuilder.prototype.e = function (a) {
        var c = TsCore.getExternalModuleName(a);
        if (c && c.kind === 9) {
            return this.b.getTypeChecker().getSymbolAtLocation(c);
        }
    };
    DependencyBuilder.prototype.getSourceFileFromNode = function (a) {
        return a.getSourceFile();
    };
    DependencyBuilder.prototype.f = function (a) {
        var b = a.getDeclarations()[0];
        var c = b.kind === 248 &&
            !(b.flags & 8192);
        var d = b.getSourceFile();
        return d;
    };
    return DependencyBuilder;
})();
exports.DependencyBuilder = DependencyBuilder;
var Ast;
(function (Ast) {
    (function (ContainerFlags) {
        ContainerFlags[ContainerFlags["None"] = 0] = "None";
        ContainerFlags[ContainerFlags["IsContainer"] = 1] = "IsContainer";
        ContainerFlags[ContainerFlags["IsBlockScopedContainer"] = 2] = "IsBlockScopedContainer";
        ContainerFlags[ContainerFlags["HasLocals"] = 4] = "HasLocals";
        ContainerFlags[ContainerFlags["IsContainerWithLocals"] = 5] = "IsContainerWithLocals";
    })(Ast.ContainerFlags || (Ast.ContainerFlags = {}));
    var ContainerFlags = Ast.ContainerFlags;
    function isFunctionLike(a) {
        if (a) {
            switch (a.kind) {
                case 144:
                case 173:
                case 213:
                case 174:
                case 143:
                case 142:
                case 145:
                case 146:
                case 147:
                case 148:
                case 149:
                case 152:
                case 153:
                    return true;
            }
        }
        return false;
    }
    Ast.isFunctionLike = isFunctionLike;
    function getContainerFlags(a) {
        switch (a.kind) {
            case 186:
            case 214:
            case 215:
            case 217:
            case 155:
            case 165:
                return 1;
            case 147:
            case 148:
            case 149:
            case 143:
            case 142:
            case 213:
            case 144:
            case 145:
            case 146:
            case 152:
            case 153:
            case 173:
            case 174:
            case 218:
            case 248:
            case 216:
                return 5;
            case 244:
            case 199:
            case 200:
            case 201:
            case 220:
                return 2;
            case 192:
                return isFunctionLike(a.parent) ? 0 : 2;
        }
        return 0;
    }
    Ast.getContainerFlags = getContainerFlags;
    function isBlockScopedVariable(a) {
        var b = (a.kind === 211)
            ? a.parent
            : a.declarationList;
        return isNodeFlagSet(b, 16384)
            || isNodeFlagSet(b, 32768);
    }
    Ast.isBlockScopedVariable = isBlockScopedVariable;
    function isBlockScopedBindingElement(a) {
        var b = getBindingElementVariableDeclaration(a);
        return (b == null) || isBlockScopedVariable(b);
    }
    Ast.isBlockScopedBindingElement = isBlockScopedBindingElement;
    function getBindingElementVariableDeclaration(a) {
        var b = a.parent;
        while (b.kind !== 211) {
            if (b.parent == null) {
                return null;
            }
            else {
                b = b.parent;
            }
        }
        return b;
    }
    Ast.getBindingElementVariableDeclaration = getBindingElementVariableDeclaration;
    function isNodeFlagSet(a, b) {
        return (a.flags & b) !== 0;
    }
    Ast.isNodeFlagSet = isNodeFlagSet;
    function isKeyword(a) {
        return 70 <= a && a <= 134;
    }
    Ast.isKeyword = isKeyword;
    function isTrivia(a) {
        return 2 <= a && a <= 7;
    }
    Ast.isTrivia = isTrivia;
    function displaySymbolFlags(a) {
        if (a & 1) {
            console.log("Symbol flag: FunctionScopedVariable");
        }
        if (a & 2) {
            console.log("Symbol flag: BlockScopedVariable ");
        }
        if (a & 4) {
            console.log("Symbol flag: Property");
        }
        if (a & 8) {
            console.log("Symbol flag: EnumMember");
        }
        if (a & 16) {
            console.log("Symbol flag: Function");
        }
        if (a & 32) {
            console.log("Symbol flag: Class");
        }
        if (a & 64) {
            console.log("Symbol flag: Interface");
        }
        if (a & 128) {
            console.log("Symbol flag: ConstEnum");
        }
        if (a & 256) {
            console.log("Symbol flag: RegularEnum");
        }
        if (a & 512) {
            console.log("Symbol flag: ValueModule");
        }
        if (a & 1024) {
            console.log("Symbol flag: NamespaceModule");
        }
        if (a & 2048) {
            console.log("Symbol flag: TypeLiteral");
        }
        if (a & 4096) {
            console.log("Symbol flag: ObjectLiteral");
        }
        if (a & 8192) {
            console.log("Symbol flag: Method");
        }
        if (a & 16384) {
            console.log("Symbol flag: Constructor");
        }
        if (a & 32768) {
            console.log("Symbol flag: GetAccessor");
        }
        if (a & 65536) {
            console.log("Symbol flag: SetAccessor");
        }
        if (a & 131072) {
            console.log("Symbol flag: Signature");
        }
        if (a & 262144) {
            console.log("Symbol flag: TypeParameter");
        }
        if (a & 524288) {
            console.log("Symbol flag: TypeAlias");
        }
        if (a & 1048576) {
            console.log("Symbol flag: ExportValue");
        }
        if (a & 2097152) {
            console.log("Symbol flag: ExportType");
        }
        if (a & 4194304) {
            console.log("Symbol flag: ExportNamespace");
        }
        if (a & 8388608) {
            console.log("Symbol flag: Alias");
        }
        if (a & 16777216) {
            console.log("Symbol flag: Instantiated");
        }
        if (a & 33554432) {
            console.log("Symbol flag: Merged");
        }
        if (a & 67108864) {
            console.log("Symbol flag: Transient");
        }
        if (a & 134217728) {
            console.log("Symbol flag: Prototype");
        }
        if (a & 268435456) {
            console.log("Symbol flag: SyntheticProperty");
        }
        if (a & 536870912) {
            console.log("Symbol flag: Optional");
        }
        if (a & 1073741824) {
            console.log("Symbol flag: ExportStar");
        }
    }
    Ast.displaySymbolFlags = displaySymbolFlags;
    function displayNodeFlags(a) {
        if (a & 1) {
            console.log("Node flag: Export");
        }
        if (a & 2) {
            console.log("Node flag: Ambient");
        }
        if (a & 16) {
            console.log("Node Flag: Public");
        }
        if (a & 32) {
            console.log("Node Flag: Private");
        }
        if (a & 128) {
            console.log("Node Flag: Static");
        }
        if (a & 256) {
            console.log("Node Flag: Abstract");
        }
        if (a & 512) {
            console.log("Node Flag: Async");
        }
        if (a & 1024) {
            console.log("Node Flag: Default");
        }
        if (a & 2048) {
            console.log("Node Flag: MultiLine");
        }
        if (a & 4096) {
            console.log("Node Flag: Synthetic");
        }
        if (a & 8192) {
            console.log("Node Flag: DeclarationFile");
        }
        if (a & 16384) {
            console.log("Node Flag: Let");
        }
        if (a & 32768) {
            console.log("Node Flag: Const");
        }
        if (a & 65536) {
            console.log("Node Flag: OctalLiteral");
        }
        if (a & 131072) {
            console.log("Node Flag: Namespace");
        }
        if (a & 262144) {
            console.log("Node Flag: ExportContext");
        }
        if (a & 524288) {
            console.log("Node Flag: ContainsThis");
        }
        if (a & 2035) {
            console.log("Node Flag: Modifier");
        }
        if (a & 112) {
            console.log("Node Flag: AccessibilityModifier");
        }
        if (a & 49152) {
            console.log("Node Flag: BlockScoped");
        }
    }
    Ast.displayNodeFlags = displayNodeFlags;
})(Ast = exports.Ast || (exports.Ast = {}));
var IdentifierInfo = (function () {
    function IdentifierInfo(c, d) {
        this.shortenedName = undefined;
        this.a = c;
        this.b = d;
        this.refs = [c];
    }
    IdentifierInfo.prototype.getName = function () {
        return this.b.name;
    };
    IdentifierInfo.prototype.getId = function () {
        return this.b.id;
    };
    IdentifierInfo.prototype.getUniqueName = function () {
        return this.getId().toString();
    };
    IdentifierInfo.prototype.getMembers = function () {
        if (this.b.flags & 6240) {
            return this.b.members;
        }
        return undefined;
    };
    IdentifierInfo.prototype.isFunctionScopedVariable = function () {
        if ((this.b.flags & 1) > 0) {
            var a = this.c();
            if (a) {
                return true;
            }
        }
        return false;
    };
    IdentifierInfo.prototype.isBlockScopedVariable = function () {
        if ((this.b.flags & 2) > 0) {
            var a = this.c();
            if (a) {
                return ((a.parent.flags & 16384) !== 0) ||
                    ((a.parent.flags & 32768) !== 0);
            }
        }
        return false;
    };
    IdentifierInfo.prototype.isParameter = function () {
        if ((this.b.flags & 1) > 0) {
            if (this.b.valueDeclaration.kind === 138) {
                return true;
            }
        }
        return false;
    };
    IdentifierInfo.prototype.isPrivateMethod = function () {
        if ((this.b.flags & 8192) > 0) {
            var a = this.b.valueDeclaration.flags;
            if ((a & 32) > 0) {
                return true;
            }
        }
        return false;
    };
    IdentifierInfo.prototype.isPrivateProperty = function () {
        if ((this.b.flags & 4) > 0) {
            var a = this.b.valueDeclaration.flags;
            if ((a & 32) > 0) {
                return true;
            }
        }
        return false;
    };
    IdentifierInfo.prototype.c = function () {
        switch (this.a.parent.kind) {
            case 211:
                return this.a.parent;
                break;
            case 212:
                break;
            case 193:
                break;
        }
        return null;
    };
    return IdentifierInfo;
})();
exports.IdentifierInfo = IdentifierInfo;
var NodeWalker = (function () {
    function NodeWalker() {
    }
    NodeWalker.prototype.walk = function (a) {
        this.visitNode(a);
    };
    NodeWalker.prototype.visitNode = function (a) {
        this.walkChildren(a);
    };
    NodeWalker.prototype.walkChildren = function (a) {
        var _this = this;
        ts.forEachChild(a, function (a) { return _this.visitNode(a); });
    };
    return NodeWalker;
})();
exports.NodeWalker = NodeWalker;
var NameGenerator = (function () {
    function NameGenerator() {
        this.a = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_0123456789";
        this.b = 0;
    }
    NameGenerator.prototype.getName = function () {
        var a = ["do", "if", "in", "for", "int", "let", "new", "try", "var"];
        var b;
        while (true) {
            b = this.c();
            if (a.indexOf(b) > 0) {
                continue;
            }
            else {
                return b;
            }
        }
    };
    NameGenerator.prototype.reset = function () {
        this.b = 0;
    };
    NameGenerator.prototype.c = function () {
        var d = this.b;
        var e = this.a[d % 54];
        d = Math.floor(d / 54);
        while (d > 0) {
            e
                += this.a[d % 64];
            d = Math.floor(d / 64);
        }
        this.b++;
        return e;
    };
    return NameGenerator;
})();
exports.NameGenerator = NameGenerator;
var ContainerContext = (function () {
    function ContainerContext(d, g, h) {
        this.d = [];
        this.namesExcluded = {};
        this.excludedIdentifiers = {};
        this.symbolTable = {};
        this.shortenedIdentifierCount = 0;
        this.e = g;
        if (g & 1) {
            this.a = this.b = d;
            this.f = false;
            this.c = this;
        }
        else if (g & 2) {
            this.b = d;
            this.f = true;
            this.c = h.getParent();
        }
    }
    ContainerContext.prototype.addChildContainer = function (a) {
        this.d.push(a);
    };
    ContainerContext.prototype.getChildren = function () {
        return this.d;
    };
    ContainerContext.prototype.getParent = function () {
        return this.c;
    };
    ContainerContext.prototype.getNode = function () {
        return this.f ? this.b : this.a;
    };
    ContainerContext.prototype.getLocals = function () {
        if (this.f)
            return this.b.locals;
        else
            return this.a.locals;
    };
    ContainerContext.prototype.hasMembers = function () {
        if (this.a) {
            var b = this.a.symbol;
            if (b && (b.flags & 6240)) {
                return true;
            }
        }
        return false;
    };
    ContainerContext.prototype.getMembers = function () {
        if (this.a) {
            var b = this.a.symbol;
            if (b && (b.flags & 6240)) {
                return b.members;
            }
        }
        return undefined;
    };
    ContainerContext.prototype.isBlockScoped = function () {
        return this.f;
    };
    ContainerContext.prototype.isFunctionScoped = function () {
        if (this.e & (1 | 5)) {
            return true;
        }
        return false;
    };
    return ContainerContext;
})();
exports.ContainerContext = ContainerContext;
var Debug;
(function (Debug) {
    function assert(a, b) {
        if (!a) {
            b = b || "Assertion failed";
            if (typeof Error !== "undefined") {
                throw new Error(b);
            }
            throw b;
        }
    }
    Debug.assert = assert;
})(Debug = exports.Debug || (exports.Debug = {}));
var BundleMinifier = (function (_super) {
    __extends(BundleMinifier, _super);
    function BundleMinifier(a, f) {
        _super.call(this);
        this.f = {};
        this.m = 0;
        this.n = 0;
        this.b = a;
        this.c = a.getTypeChecker();
        this.d = f;
        this.e = [];
        this.h = new NameGenerator();
    }
    BundleMinifier.prototype.transform = function (b) {
        this.a = b;
        return this.o(b);
    };
    BundleMinifier.prototype.removeWhitespace = function (a) {
        this.k = new Date().getTime();
        this.i = a.length;
        var b = "";
        var c = 0;
        var e;
        var f = ts.createScanner(1, false, 0, a);
        while ((e = f.scan()) !== 1) {
            switch (e) {
                case 5:
                    if (Ast.isKeyword(c)) {
                        var g = f.getTokenText();
                        b += g;
                    }
                    break;
                case 4:
                    break;
                default:
                    if (Ast.isKeyword(e) && (c === 5)) {
                        b
                            += " ";
                    }
                    b
                        += f.getTokenText();
                    break;
            }
            c
                = e;
        }
        this.j = b.length;
        this.k = new Date().getTime() - this.k;
        if (this.d.diagnostics)
            this.x();
        return a;
    };
    BundleMinifier.prototype.visitNode = function (a) {
        if (this.w(a)) {
            _super.prototype.visitNode.call(this, a);
            this.v();
        }
        else {
            switch (a.kind) {
                case 69:
                    var b = a;
                    var e = this.c.getSymbolAtLocation(b);
                    if (e) {
                        var g = e.id;
                        if (g !== undefined) {
                            var h = g.toString();
                            if (Utils.hasProperty(this.f, h)) {
                                var i = this.f[h];
                                this.f[h].refs.push(b);
                                if (!Utils.hasProperty(this.u().symbolTable, h)) {
                                    this.u().excludedIdentifiers[h] = i;
                                    if ((!i.isBlockScopedVariable) || (this.d.target === 1)) {
                                        this.u().getParent().excludedIdentifiers[h] = i;
                                    }
                                }
                            }
                            else {
                                var j = new IdentifierInfo(b, e);
                                this.u().symbolTable[h] = j;
                                this.f[h] = j;
                                var k = e.getName();
                                if (k.length === 1) {
                                    j.shortenedName = k;
                                    this.u().namesExcluded[e.getName()] = true;
                                }
                                this.m++;
                            }
                        }
                        else {
                        }
                    }
                    else {
                    }
                    break;
                default:
            }
            _super.prototype.visitNode.call(this, a);
        }
    };
    BundleMinifier.prototype.o = function (a) {
        this.l = new Date().getTime();
        this.walk(a);
        this.p(this.g);
        this.l = new Date().getTime() - this.l;
        if (this.d.diagnostics)
            this.y();
        return a;
    };
    BundleMinifier.prototype.p = function (a) {
        if (this.d.target === 1) {
            if (a.isFunctionScoped()) {
                this.h.reset();
            }
        }
        else {
            this.h.reset();
        }
        var b;
        for (var g in a.excludedIdentifiers) {
            b = a.excludedIdentifiers[g];
            if (b.shortenedName) {
                a
                    .namesExcluded[b.shortenedName] = true;
            }
            else {
            }
        }
        var c = a.getParent();
        if (c) {
            for (var i in c.excludedIdentifiers) {
                b = c.excludedIdentifiers[i];
                if (b.shortenedName) {
                    a
                        .namesExcluded[b.shortenedName] = true;
                }
                else {
                }
            }
        }
        if (a.hasMembers()) {
            var k = a.getMembers();
            for (var l in k) {
                var m = k[l];
                if (m && m.id) {
                    var n = m.id.toString();
                    if (Utils.hasProperty(this.f, n)) {
                        var o = this.f[n];
                        this.q(a, o);
                    }
                    else {
                        Debug.assert(true, "Member not found");
                    }
                }
                else {
                }
            }
        }
        for (var r in a.symbolTable) {
            var s = a.symbolTable[r];
            this.q(a, s);
        }
        var e = a.getChildren();
        for (var j = 0; j < e.length; j++) {
            this.p(e[j]);
        }
    };
    BundleMinifier.prototype.q = function (a, b) {
        var _this = this;
        if (this.r(b)) {
            var c = this.s(a, b);
            Utils.forEach(b.refs, function (a) {
                _this.t(a, c);
            });
            return;
        }
        Logger.info("Identifier cannot be shortened: ", b.getName());
    };
    BundleMinifier.prototype.r = function (a) {
        if (a.isBlockScopedVariable() || a.isFunctionScopedVariable() || a.isPrivateMethod() || a.isPrivateProperty() || a.isParameter()) {
            return true;
        }
        return false;
    };
    BundleMinifier.prototype.s = function (a, b) {
        if (!b.shortenedName) {
            var c = b.getName();
            if (c.length === 1) {
                b
                    .shortenedName = c;
            }
            else {
                while (true) {
                    var d = this.h.getName();
                    Debug.assert(d.length <= c.length);
                    if (!Utils.hasProperty(a.namesExcluded, d)) {
                        b.shortenedName = d;
                        break;
                    }
                    else {
                        Logger.info("Generated name was excluded: ", d, c);
                    }
                }
                this.n++;
            }
        }
        else {
            Logger.info("Identifier already has shortened name: ", b.getName(), b.shortenedName);
        }
        return b.shortenedName;
    };
    BundleMinifier.prototype.t = function (b, c) {
        b
            .text = c;
        c
            = " " + c + " ";
        b.end = b.pos + c.length - 1;
        for (var i = 0; i < c.length; i++) {
            this.a.text = Utils.replaceAt(this.a.text, b.pos + i, c[i]);
        }
    };
    BundleMinifier.prototype.analyzeContainerIdentifiers = function () {
        var _this = this;
        var a = Object.keys(this.u().symbolTable);
        var b = a.length;
        Logger.log("Identifier count: ", b);
        var c = b % 54;
        var d = b - c;
        var e = ((2 * d) + c) / b;
        Logger.log("Compression ratio: ", e);
        var f = this.u().symbolTable;
        a
            .sort(function (a, b) {
            var c = f[b].refs.length * (f[b].getName().length - e);
            var d = f[a].refs.length * (f[a].getName().length - e);
            return (c - d);
        });
        var g = 0;
        var h = 0;
        var i = 0;
        a
            .forEach(function (a) {
            var b = _this.u().symbolTable[a];
            b.shortenedName = _this.h.getName();
            var c = (b.getName().length * b.refs.length);
            var d = (b.shortenedName.length * b.refs.length);
            Logger.log("Compression of symbol: ", b.getName(), c, d, c - d);
            g
                += c;
            h += d;
        });
        Logger.log("Total Compression: ", g, h);
    };
    BundleMinifier.prototype.u = function () {
        return this.e[this.e.length - 1];
    };
    BundleMinifier.prototype.v = function () {
        return this.e.pop();
    };
    BundleMinifier.prototype.w = function (a) {
        var b = Ast.getContainerFlags(a);
        if (b & (1 | 2)) {
            var c = new ContainerContext(a, b, this.u());
            var d = this.u();
            if (!d) {
                this.g = c;
            }
            else {
                d
                    .addChildContainer(c);
            }
            this.e.push(c);
            return true;
        }
        return false;
    };
    BundleMinifier.prototype.x = function () {
        var a = new StatisticsReporter();
        a
            .reportTime("Whitespace time", this.k);
        a.reportPercentage("Whitespace reduction", ((this.i - this.j) / this.i) * 100.00);
    };
    BundleMinifier.prototype.y = function () {
        var a = new StatisticsReporter();
        a
            .reportTime("Minify time", this.l);
        a.reportCount("Total identifiers", this.m);
        a.reportCount("Identifiers shortened", this.n);
    };
    return BundleMinifier;
})(NodeWalker);
exports.BundleMinifier = BundleMinifier;
var DiagnosticsReporter = (function () {
    function DiagnosticsReporter() {
    }
    DiagnosticsReporter.reportDiagnostics = function (a) {
        if (!a) {
            return;
        }
        for (var i = 0; i < a.length; i++) {
            this.reportDiagnostic(a[i]);
        }
    };
    DiagnosticsReporter.reportDiagnostic = function (a) {
        if (!a) {
            return;
        }
        var b = "";
        if (a.file) {
            var d = ts.getLineAndCharacterOfPosition(a.file, a.start);
            b
                += chalk.gray(a.file.fileName + "(" + (d.line + 1) + "," + (d.character + 1) + "): ");
        }
        var c;
        switch (a.category) {
            case ts.DiagnosticCategory.Error:
                c = chalk.red(ts.DiagnosticCategory[a.category].toLowerCase());
                break;
            case ts.DiagnosticCategory.Warning:
                c = chalk.yellow(ts.DiagnosticCategory[a.category].toLowerCase());
                break;
            default: c = chalk.green(ts.DiagnosticCategory[a.category].toLowerCase());
        }
        b
            += c + " TS" + chalk.white(a.code + '') + ": " + chalk.grey(ts.flattenDiagnosticMessageText(a.messageText, "\n"));
        Logger.log(b);
    };
    return DiagnosticsReporter;
})();
exports.DiagnosticsReporter = DiagnosticsReporter;
var ProjectBuildContext = (function () {
    function ProjectBuildContext(a, b, c) {
        this.host = a;
        this.setProgram(c);
        this.config = b;
    }
    ProjectBuildContext.prototype.isWatchMode = function () {
        this.config.compilerOptions.watch || false;
    };
    ProjectBuildContext.prototype.getProgram = function () {
        return this.a;
    };
    ProjectBuildContext.prototype.setProgram = function (b) {
        if (this.a) {
            var c = b ? b.getSourceFiles() : undefined;
            Utils.forEach(this.a.getSourceFiles(), function (a) {
                if (!(c && Utils.contains(c, a))) {
                    var b = a;
                    if (b.fileWatcher) {
                        b.fileWatcher.unwatch(b.fileName);
                    }
                }
            });
        }
        this.host.setReuseableProgram(b);
        this.a = b;
    };
    return ProjectBuildContext;
})();
exports.ProjectBuildContext = ProjectBuildContext;
var BundleBuilder = (function () {
    function BundleBuilder(c, d) {
        this.c = 0;
        this.d = 0;
        this.e = 0;
        this.f = 0;
        this.g = "";
        this.h = {};
        this.i = {};
        this.j = {};
        this.a = c;
        this.b = d;
    }
    BundleBuilder.prototype.build = function (e) {
        var _this = this;
        this.f = new Date().getTime();
        var k = new DependencyBuilder(this.a, this.b);
        var l = path.dirname(e.name);
        if (e.config.outDir) {
            l = path.join(l, e.config.outDir);
        }
        var m = path.join(l, path.basename(e.name));
        m = TsCore.normalizeSlashes(m);
        this.g = "";
        this.h = {};
        this.i = {};
        this.j = {};
        var n = false;
        var o = {};
        for (var m in e.fileNames) {
            var q = e.fileNames[m];
            Logger.info(">>> Processing bundle file:", q);
            var r = this.a.getCanonicalFileName(TsCore.normalizeSlashes(q));
            Logger.info("BundleSourceFileName:", r);
            var s_1 = this.b.getSourceFile(r);
            if (!s_1) {
                var v = TsCore.createDiagnostic({ code: 6060, category: ts.DiagnosticCategory.Error, key: "Bundle Source File '{0}' not found." }, r);
                return new BundleResult(ts.ExitStatus.DiagnosticsPresent_OutputsSkipped, [v]);
            }
            if (s_1.languageVariant == 1) {
                n = true;
            }
            var t = new Date().getTime();
            var u = k.getSourceFileDependencies(s_1);
            this.c += new Date().getTime() - t;
            for (var q in u) {
                if (!Utils.hasProperty(o, q)) {
                    o[q] = u[q];
                }
            }
            t
                = new Date().getTime();
            Logger.info("traversing source dependencies for: ", s_1.fileName);
            for (var s in u) {
                u[s].forEach(function (a) {
                    var b = _this.t(a);
                    if (_this.r(b)) {
                        var c = b.getDeclarations()[0];
                        var d = c.getSourceFile();
                        var e = d.fileName;
                        if (!Utils.hasProperty(_this.h, e)) {
                            _this.p(d);
                        }
                    }
                    else {
                        if (a.kind === 221) {
                            var f = a.name.text;
                            var g = _this.k(a);
                            if (_this.l(g, f)) {
                                _this.o(a.getText());
                            }
                        }
                        else {
                            _this.m(a);
                        }
                    }
                });
            }
            this.p(s_1);
            this.d += new Date().getTime() - t;
        }
        var q = n ? ".tsx" : ".ts";
        var r = { path: m + q, extension: q, text: this.g };
        this.f = new Date().getTime() - this.f;
        if (this.b.getCompilerOptions().diagnostics) {
            this.u();
        }
        return new BundleResult(ts.ExitStatus.Success, undefined, r);
    };
    BundleBuilder.prototype.k = function (a) {
        if (a.moduleReference.kind === 232) {
            var b = a.moduleReference;
            return b.expression.text;
        }
        else {
            return a.moduleReference.getText();
        }
    };
    BundleBuilder.prototype.l = function (a, b) {
        if (!Utils.hasProperty(this.i, a)) {
            this.i[a] = {};
        }
        var c = this.i[a];
        if (!Utils.hasProperty(c, b)) {
            c[b] = b;
            return true;
        }
        return false;
    };
    BundleBuilder.prototype.m = function (a) {
        var _this = this;
        if (!a.importClause) {
            return;
        }
        var b = a.moduleSpecifier.text;
        var c = "import ";
        var d = false;
        var e = false;
        if (a.importClause) {
            if (a.importClause.name && this.l(b, a.importClause.name.text)) {
                c += a.importClause.name.text;
                d = true;
            }
        }
        if (a.importClause.namedBindings) {
            if (a.importClause.namedBindings.kind === 224) {
                if (this.l(b, a.importClause.namedBindings.name.text)) {
                    if (d) {
                        c += ", ";
                    }
                    c
                        += "* as ";
                    c += a.importClause.namedBindings.name.text;
                    e
                        = true;
                }
            }
            else {
                if (d) {
                    c += ", ";
                }
                c
                    += "{ ";
                Utils.forEach(a.importClause.namedBindings.elements, function (a) {
                    if (_this.l(b, a.name.text)) {
                        if (!e) {
                            e = true;
                        }
                        else {
                            c += ", ";
                        }
                        var d = a.propertyName;
                        if (d) {
                            c += d.text + " as " + a.name.text;
                        }
                        else {
                            c += a.name.text;
                        }
                    }
                });
                c
                    += " }";
            }
        }
        c
            += " from ";
        c += a.moduleSpecifier.getText();
        c += ";";
        if (d || e) {
            this.o(c);
        }
    };
    BundleBuilder.prototype.n = function (a) {
        var _this = this;
        Logger.info("Processing import statements in file: ", a.fileName);
        var b = a.text;
        ts.forEachChild(a, function (a) {
            if (a.kind === 222 || a.kind === 221 || a.kind === 228) {
                Logger.info("processImportStatements() found import");
                var c = TsCore.getExternalModuleName(a);
                if (c && c.kind === 9) {
                    var d = _this.b.getTypeChecker().getSymbolAtLocation(c);
                    if ((d) && (_this.r(d) || _this.s)) {
                        Logger.info("processImportStatements() removing code module symbol");
                        var e = a.pos;
                        var f = a.end;
                        var g_1 = f - e;
                        var h = "";
                        for (var i = 0; i < g_1; i++) {
                            h += " ";
                        }
                        var i = b.substring(0, e);
                        var j = b.substring(f);
                        b
                            = i + h + j;
                    }
                }
            }
        });
        return b;
    };
    BundleBuilder.prototype.o = function (a) {
        Logger.info("Entering emitModuleImportDeclaration()");
        this.g += a + "\n";
    };
    BundleBuilder.prototype.p = function (a) {
        Logger.info("Entering addSourceFile() with: ", a.fileName);
        if (this.q(a)) {
            var b = this.n(a);
            this.g += b + "\n";
            this.h[a.fileName] = a.fileName;
        }
        else {
            if (!Utils.hasProperty(this.j, a.fileName)) {
                Logger.info("Adding definition file to bundle source context: ", a.fileName);
                this.j[a.fileName] = a.text;
            }
        }
    };
    BundleBuilder.prototype.q = function (a) {
        return (a.kind === 248 &&
            !(a.flags & 8192));
    };
    BundleBuilder.prototype.r = function (a) {
        var b = a.getDeclarations()[0];
        return (b.kind === 248 &&
            !(b.flags & 8192));
    };
    BundleBuilder.prototype.s = function (a) {
        var b = a.getDeclarations()[0];
        return ((b.kind === 218) && ((b.flags & 2) > 0));
    };
    BundleBuilder.prototype.t = function (a) {
        var c = TsCore.getExternalModuleName(a);
        if (c && c.kind === 9) {
            return this.b.getTypeChecker().getSymbolAtLocation(c);
        }
    };
    BundleBuilder.prototype.u = function () {
        var a = new StatisticsReporter();
        a
            .reportTime("Deps gen time", this.c);
        a.reportTime("Deps walk time", this.d);
        a.reportTime("Source gen time", this.f);
    };
    return BundleBuilder;
})();
exports.BundleBuilder = BundleBuilder;
var BundleCompiler = (function () {
    function BundleCompiler(e, f, g) {
        this.e = 0;
        this.f = 0;
        this.g = 0;
        this.h = {};
        this.a = e;
        this.b = f;
        this.c = g;
        this.d = this.b.getCompilerOptions();
    }
    BundleCompiler.prototype.compile = function (i, j) {
        var _this = this;
        Logger.log("Compiling bundle...");
        this.f = this.g = new Date().getTime();
        var k = [];
        var l;
        var m;
        var n;
        Utils.forEach(this.b.getSourceFiles(), function (a) {
            k.push(a.fileName);
        });
        var o = {};
        var p;
        var q = j.minify || false;
        if (q) {
            var j_1 = path.dirname(i.path);
            var k_1 = path.basename(i.path, i.extension);
            l
                = TsCore.normalizeSlashes(path.join(j_1, k_1 + ".min.ts"));
        }
        else {
            l = i.path;
        }
        m
            = i.text;
        this.h[l] = m;
        n = ts.createSourceFile(l, i.text, this.d.target);
        k.push(l);
        Utils.forEach(this.b.getSourceFiles(), function (a) {
            _this.h[a.fileName] = a.text;
        });
        function writeFile(a, b, c, d) {
            o[a] = b;
        }
        function getSourceFile(a, b, c) {
            if (a === l) {
                return n;
            }
            var d = p(a, b, c);
            return d;
        }
        p
            = this.a.getSourceFile;
        this.a.getSourceFile = getSourceFile;
        this.a.writeFile = writeFile;
        var r = this.d;
        r
            .declaration = j.declaration || this.d.declaration;
        r.sourceMap = j.sourceMap || this.d.sourceMap;
        r.noEmit = false;
        if (q) {
            r.removeComments = true;
        }
        var s = ts.createProgram(k, r, this.a);
        var t = ts.getPreEmitDiagnostics(s);
        this.g = new Date().getTime() - this.g;
        if (this.d.noEmitOnError && t.length > 0) {
            return new CompilerResult(ts.ExitStatus.DiagnosticsPresent_OutputsSkipped, t);
        }
        if (q) {
            Logger.log("Minifying bundle...");
            var j = new BundleMinifier(s, r);
            n = j.transform(n);
        }
        this.e = new Date().getTime();
        var u = s.emit(n);
        this.e = new Date().getTime() - this.e;
        if (u.emitSkipped) {
            return new CompilerResult(ts.ExitStatus.DiagnosticsPresent_OutputsSkipped);
        }
        var v = t.concat(u.diagnostics);
        if (v.length > 0) {
            return new CompilerResult(ts.ExitStatus.DiagnosticsPresent_OutputsGenerated, v);
        }
        Logger.info("Streaming vinyl bundle source: ", l);
        var w = new TsVinylFile({
            path: l,
            contents: new Buffer(i.text)
        });
        this.c.push(w);
        var x = path.dirname(i.path);
        var y = path.basename(i.path, i.extension);
        var z = q ? ".min" : "";
        var A = TsCore.normalizeSlashes(path.join(x, y + z + ".js"));
        if (Utils.hasProperty(o, A)) {
            var j = o[A];
            if (q) {
                var m = new BundleMinifier(s, r);
                j = m.removeWhitespace(j);
            }
            Logger.info("Streaming vinyl js: ", y);
            var k = new TsVinylFile({
                path: A,
                contents: new Buffer(j)
            });
            this.c.push(k);
        }
        var B = TsCore.normalizeSlashes(path.join(x, y + z + ".d.ts"));
        if (Utils.hasProperty(o, B)) {
            Logger.info("Streaming vinyl d.ts: ", B);
            var k = new TsVinylFile({
                path: B,
                contents: new Buffer(o[B])
            });
            this.c.push(k);
        }
        var C = TsCore.normalizeSlashes(path.join(x, y + z + ".js.map"));
        if (Utils.hasProperty(o, C)) {
            Logger.info("Streaming vinyl js.map: ", C);
            var k = new TsVinylFile({
                path: C,
                contents: new Buffer(o[C])
            });
            this.c.push(k);
        }
        this.f = new Date().getTime() - this.f;
        if (this.d.diagnostics)
            this.i();
        return new CompilerResult(ts.ExitStatus.Success);
    };
    BundleCompiler.prototype.i = function () {
        var a = new StatisticsReporter();
        a
            .reportTime("Pre-emit time", this.g);
        a.reportTime("Emit time", this.e);
        a.reportTime("Compile time", this.f);
    };
    return BundleCompiler;
})();
exports.BundleCompiler = BundleCompiler;
var Project = (function () {
    function Project(c, d) {
        var _this = this;
        this.f = 0;
        this.g = 0;
        this.h = 0;
        this.i = 0;
        this.r = function (a, b) {
            _this.j = undefined;
            _this.t();
        };
        this.s = function (a, b, c) {
            a.fileWatcher.unwatch(a.fileName);
            a.fileWatcher = undefined;
            _this.t();
        };
        this.u = function () {
            _this.l = undefined;
            var a = _this.p();
            _this.z(a);
            if (_this.j.config.compilerOptions.watch) {
                Logger.log("Watching for project changes...");
            }
        };
        this.a = c;
        this.b = d;
    }
    Project.prototype.build = function (a) {
        var b = this.q();
        if (!b.success) {
            DiagnosticsReporter.reportDiagnostics(b.errors);
            return ts.ExitStatus.DiagnosticsPresent_OutputsSkipped;
        }
        this.j = this.m(b);
        Logger.log("Building Project with: " + chalk.magenta("" + this.e));
        Logger.log("TypeScript compiler version: ", ts.version);
        this.c = a;
        var d = this.p();
        this.z(d);
        if (b.compilerOptions.watch) {
            Logger.log("Watching for project changes...");
        }
        else {
            this.o();
        }
        return d;
    };
    Project.prototype.m = function (a) {
        if (a.compilerOptions.watch) {
            if (!this.n()) {
                a.compilerOptions.watch = false;
            }
        }
        var b = new WatchCompilerHost(a.compilerOptions, this.s);
        return new ProjectBuildContext(b, a);
    };
    Project.prototype.n = function () {
        var _this = this;
        if (!ts.sys.watchFile) {
            var a = TsCore.createDiagnostic({ code: 5001, category: ts.DiagnosticCategory.Warning, key: "The current node host does not support the '{0}' option." }, "-watch");
            DiagnosticsReporter.reportDiagnostic(a);
            return false;
        }
        if (!this.k) {
            this.k = chokidar.watch(this.e);
            this.k.on("change", function (a, b) { return _this.r(a, b); });
        }
        return true;
    };
    Project.prototype.o = function () {
        this.c.push(null);
    };
    Project.prototype.p = function () {
        this.f = this.h = new Date().getTime();
        if (!this.j) {
            var t = this.q();
            if (!t.success) {
                DiagnosticsReporter.reportDiagnostics(t.errors);
                return ts.ExitStatus.DiagnosticsPresent_OutputsSkipped;
            }
            this.j = this.m(t);
        }
        var a = [];
        var b = this.j.config.fileNames;
        var d = this.j.config.bundles;
        var e = this.j.config.compilerOptions;
        var k = ts.createProgram(b, e, this.j.host, this.j.getProgram());
        this.h = new Date().getTime() - this.h;
        this.j.setProgram(k);
        var l = new Compiler(this.j.host, k, this.c);
        this.g = new Date().getTime();
        var n = l.compile();
        this.g = new Date().getTime() - this.g;
        if (!n.succeeded()) {
            DiagnosticsReporter.reportDiagnostics(n.getErrors());
            return n.getStatus();
        }
        if (e.listFiles) {
            Utils.forEach(this.j.getProgram().getSourceFiles(), function (a) {
                Logger.log(a.fileName);
            });
        }
        this.i = new Date().getTime();
        var o = new BundleBuilder(this.j.host, this.j.getProgram());
        var r = new BundleCompiler(this.j.host, this.j.getProgram(), this.c);
        var s;
        for (var i = 0, b = d.length; i < b; i++) {
            Logger.log("Building bundle: ", chalk.cyan(d[i].name));
            s
                = o.build(d[i]);
            if (!s.succeeded()) {
                DiagnosticsReporter.reportDiagnostics(s.getErrors());
                return ts.ExitStatus.DiagnosticsPresent_OutputsSkipped;
            }
            n
                = r.compile(s.getBundleSource(), d[i].config);
            if (!n.succeeded()) {
                DiagnosticsReporter.reportDiagnostics(n.getErrors());
                return n.getStatus();
            }
        }
        this.i = new Date().getTime() - this.i;
        this.f = new Date().getTime() - this.f;
        if (e.diagnostics) {
            this.A();
        }
        if (a.length > 0) {
            return ts.ExitStatus.DiagnosticsPresent_OutputsGenerated;
        }
        return ts.ExitStatus.Success;
    };
    Project.prototype.q = function () {
        var _this = this;
        try {
            var l = fs.lstatSync(this.a).isDirectory();
        }
        catch (e) {
            var m = TsCore.createDiagnostic({ code: 6064, category: ts.DiagnosticCategory.Error, key: "Cannot read project path '{0}'." }, this.a);
            return { success: false, errors: [m] };
        }
        if (l) {
            this.d = this.a;
            this.e = path.join(this.a, "tsconfig.json");
        }
        else {
            this.d = path.dirname(this.a);
            this.e = this.a;
        }
        Logger.info("Reading config file:", this.e);
        var c = ts.readConfigFile(this.e, this.v);
        if (c.error) {
            return { success: false, errors: [c.error] };
        }
        var f = c.config;
        Logger.info("Parsing config file...");
        var g = ts.parseJsonConfigFileContent(f, ts.sys, this.d);
        if (g.errors.length > 0) {
            return { success: false, errors: g.errors };
        }
        g
            .fileNames = this.x(g.fileNames, this.d);
        if (this.b.convertFiles === true) {
            this.y(g.fileNames, this.d);
        }
        var h = new BundleParser();
        var i = h.parseConfigFile(f, this.d);
        if (i.errors.length > 0) {
            return { success: false, errors: i.errors };
        }
        i
            .bundles.forEach(function (a) {
            a.fileNames = _this.x(a.fileNames, _this.d);
        });
        var j = this.w(this.b, this.d);
        if (j.errors.length > 0) {
            return { success: false, errors: j.errors };
        }
        var k = Utils.extend(j.options, g.options);
        Logger.info("Compiler options: ", k);
        return {
            success: true,
            compilerOptions: k,
            fileNames: g.fileNames,
            bundles: i.bundles
        };
    };
    Project.prototype.t = function () {
        if (this.l) {
            clearTimeout(this.l);
        }
        this.l = setTimeout(this.u, 250);
    };
    Project.prototype.v = function (a) {
        return ts.sys.readFile(a);
    };
    Project.prototype.w = function (a, b) {
        var c = ts.parseJsonConfigFileContent(a, ts.sys, b);
        if (c.options.project) {
            var d = TsCore.createDiagnostic({ code: 5099, category: ts.DiagnosticCategory.Error, key: "The compiler option '{0}' is not supported in this context." }, "--project");
            c.errors.push(d);
        }
        if (c.options.init) {
            var a = TsCore.createDiagnostic({ code: 5099, category: ts.DiagnosticCategory.Error, key: "The compiler option '{0}' is not supported in this context." }, "--init");
            c.errors.push(a);
        }
        return c;
    };
    Project.prototype.x = function (a, b) {
        var c = new Glob();
        var d = [];
        Utils.forEach(a, function (a) {
            if (!c.hasPattern(a)) {
                d.push(path.normalize(a));
            }
        });
        var e = c.expand(a, b);
        var f = [];
        Utils.forEach(e, function (a) {
            f.push(path.normalize(a));
        });
        return _.union(f, d);
    };
    Project.prototype.y = function (a, b) {
        var c = "";
        try {
            c = fs.readFileSync(this.e, 'utf8');
            if (c !== undefined) {
                var d = JSON.parse(c);
                var f = [];
                a.forEach(function (a) {
                    f.push(path.relative(b, a).replace(/\\/g, "/"));
                });
                d["files"] = f;
                fs.writeFileSync(this.e, JSON.stringify(d, undefined, 4));
            }
        }
        catch (e) {
            Logger.log(chalk.yellow("Converting project files failed."));
        }
    };
    Project.prototype.z = function (a) {
        switch (a) {
            case ts.ExitStatus.Success:
                Logger.log(chalk.green("Project build completed successfully."));
                break;
            case ts.ExitStatus.DiagnosticsPresent_OutputsSkipped:
                Logger.log(chalk.red("Build completed with errors."));
                break;
            case ts.ExitStatus.DiagnosticsPresent_OutputsGenerated:
                Logger.log(chalk.red("Build completed with errors. " + chalk.italic("Outputs generated.")));
                break;
        }
    };
    Project.prototype.A = function () {
        var a = new StatisticsReporter();
        a
            .reportTitle("Total build times...");
        a.reportTime("Pre-build time", this.h);
        a.reportTime("Compiling time", this.g);
        a.reportTime("Bundling time", this.i);
        a.reportTime("Build time", this.f);
    };
    return Project;
})();
exports.Project = Project;
function src(a, b) {
    if (a === undefined && typeof a !== 'string') {
        throw new Error("Provide a valid directory or file path to the Typescript project configuration json file.");
    }
    b
        = b || {};
    b.logLevel = b.logLevel || 0;
    Logger.setLevel(b.logLevel);
    Logger.setName("TsProject");
    var c = new CompileStream();
    var d = new Project(a, b);
    d.build(c);
    return c;
}
var b = {
    src: src
};
module.exports = b;
