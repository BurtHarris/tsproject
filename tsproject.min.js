var __extends=(this && this.__extends)|| function (d,b){ for (var p in b) if (b.hasOwnProperty(p))d[p]=b[p]; function __(){ this.constructor =d;}d.prototype=b=== null ?Object.create(b):(__.prototype=b.prototype, new __());};var ts= require("typescript");var stream= require("stream");var fs= require("fs");var chalk= require("chalk");var path= require("path");var chokidar= require("chokidar");exports.level={none:0,info:1,warn:2,error:3};var Logger=(function (){ function Logger(){}Logger.setLevel= function (level){ this.logLevel=level;};Logger.setName= function (name){ this.logName=name;};Logger.log= function (){ var args=[]; for (var _i=0;_i<arguments.length;_i++){args[_i-0]=arguments[_i];}console.log.apply(console,[chalk.gray("["+ this.logName+"]")].concat(args));};Logger.info= function (){ var args=[]; for (var _i=0;_i<arguments.length;_i++){args[_i-0]=arguments[_i];} if (this.logLevel<exports.level.info){ return;}console.log.apply(console,[chalk.gray(("["+ this.logName+"]")+chalk.blue(" INFO: "))].concat(args));};Logger.warn= function (){ var args=[]; for (var _i=0;_i<arguments.length;_i++){args[_i-0]=arguments[_i];} if (this.logLevel<exports.level.warn){ return;}console.log.apply(console,[("["+ this.logName+"]")+chalk.yellow(" WARNING: ")].concat(args));};Logger.error= function (){ var args=[]; for (var _i=0;_i<arguments.length;_i++){args[_i-0]=arguments[_i];} if (this.logLevel<exports.level.error){ return;}console.log.apply(console,[("["+ this.logName+"]")+chalk.red(" ERROR: ")].concat(args));};Logger.logLevel=exports.level.none;Logger.logName="logger"; return Logger;})();exports.Logger=Logger;var TsCore;(function (TsCore){ function fileExtensionIs(path,extension){ var a=path.length; var b=extension.length; return a>b&&path.substr(a-b,b)===extension;}TsCore.fileExtensionIs=fileExtensionIs;TsCore.a=[".ts",".tsx",".d.ts"];TsCore.b=TsCore.a; function isSupportedSourceFileName(fileName){ if (!fileName){ return  false;} for (var _i=0;_i<TsCore.a.length;_i++){ var b=TsCore.a[_i]; if (fileExtensionIs(fileName,b)){ return  true;}} return  false;}TsCore.isSupportedSourceFileName=isSupportedSourceFileName; function getExternalModuleName(node){ if (node.kind===222){ return node.moduleSpecifier;} if (node.kind===221){ var a=node.moduleReference; if (a.kind===232){ return a.expression;}} if (node.kind===228){ return node.moduleSpecifier;}}TsCore.getExternalModuleName=getExternalModuleName; function createDiagnostic(message){ var args=[]; for (var _i=1;_i<arguments.length;_i++){args[_i-1]=arguments[_i];} var a=message.key; if (arguments.length>1){a=formatStringFromArgs(a,arguments,1);} return {file:undefined,start:undefined,length:undefined,messageText:a,category:message.category,code:message.code};}TsCore.createDiagnostic=createDiagnostic; function formatStringFromArgs(text,args,baseIndex){baseIndex=baseIndex||0; return text.replace(/{(\d+)}/g, function (match,index){ return args[+index+baseIndex];});} function isDeclarationFile(file){ return (file.flags&8192)!==0;}TsCore.isDeclarationFile=isDeclarationFile; function isAliasSymbolDeclaration(node){ return node.kind===221||node.kind===223&&!!node.name||node.kind===224||node.kind===226||node.kind===230||node.kind===227&&node.expression.kind===69;}TsCore.isAliasSymbolDeclaration=isAliasSymbolDeclaration; function normalizeSlashes(path){ return path.replace(/\\/g,"/");}TsCore.normalizeSlashes=normalizeSlashes; function outputExtension(path){ return path.replace(/\.ts/,".js");}TsCore.outputExtension=outputExtension;})(TsCore=exports.TsCore||(exports.TsCore={}));var Utils;(function (Utils){ function forEach(array,callback){ if (array){ for (var i=0,a=array.length;i<a;i++){ var b=callback(array[i],i); if (b){ return b;}}} return undefined;}Utils.forEach=forEach; function contains(array,value){ if (array){ for (var _i=0;_i<array.length;_i++){ var v=array[_i]; if (v===value){ return  true;}}} return  false;}Utils.contains=contains; var a=Object.prototype.hasOwnProperty; function hasProperty(map,key){ return a.call(map,key);}Utils.hasProperty=hasProperty; function clone(objectClone){ var a={}; for (var b in objectClone){a[b]=objectClone[b];} return a;}Utils.clone=clone; function map(array,f){ var a; if (array){a=[]; for (var _i=0;_i<array.length;_i++){ var v=array[_i];a.push(f(v));}} return a;}Utils.map=map; function extend(first,second){ var a=1; var b={}; for (var a in first){b[a]=first[a];} for (var c in second){ if (!hasProperty(b,c)){b[c]=second[c];}} return b;}Utils.extend=extend; function replaceAt(str,index,character){ return str.substr(0,index)+character+str.substr(index+character.length);}Utils.replaceAt=replaceAt;})(Utils=exports.Utils||(exports.Utils={}));var File= require("vinyl");var CompilerResult=(function (){ function CompilerResult(status,errors){ this.status=status; this.errors=errors;}CompilerResult.prototype.getErrors= function (){ return  this.errors;};CompilerResult.prototype.getStatus= function (){ return  this.status;};CompilerResult.prototype.succeeded= function (){ return (this.status===ts.ExitStatus.Success);}; return CompilerResult;})();exports.CompilerResult=CompilerResult;var CachingCompilerHost=(function (){ function CachingCompilerHost(compilerOptions){ var _this= this; this.output={}; this.dirExistsCache={}; this.dirExistsCacheSize=0; this.fileExistsCache={}; this.fileExistsCacheSize=0; this.fileReadCache={}; this.getSourceFile= this.getSourceFileImpl; this.fileExists= function (fileName){fileName=_this.getCanonicalFileName(fileName); if (!_this.dirExists(path.dirname(fileName))){ return  false;} if (Utils.hasProperty(_this.fileExistsCache,fileName)){ return _this.fileExistsCache[fileName];}_this.fileExistsCacheSize++; return _this.fileExistsCache[fileName]=_this.baseHost.fileExists(fileName);}; this.compilerOptions=compilerOptions; this.baseHost=ts.createCompilerHost(this.compilerOptions);}CachingCompilerHost.prototype.getOutput= function (){ return  this.output;};CachingCompilerHost.prototype.getSourceFileImpl= function (fileName,languageVersion,onError){ return  this.baseHost.getSourceFile(fileName,languageVersion,onError);};CachingCompilerHost.prototype.writeFile= function (fileName,data,writeByteOrderMark,onError){ this.output[fileName]=data;};CachingCompilerHost.prototype.readFile= function (fileName){ if (Utils.hasProperty(this.fileReadCache,fileName)){ return  this.fileReadCache[fileName];} return  this.fileReadCache[fileName]= this.baseHost.readFile(fileName);};CachingCompilerHost.prototype.getDefaultLibFileName= function (options){ return  this.baseHost.getDefaultLibFileName(options);};CachingCompilerHost.prototype.getCurrentDirectory= function (){ return  this.baseHost.getCurrentDirectory();};CachingCompilerHost.prototype.getCanonicalFileName= function (fileName){ return  this.baseHost.getCanonicalFileName(fileName);};CachingCompilerHost.prototype.useCaseSensitiveFileNames= function (){ return  this.baseHost.useCaseSensitiveFileNames();};CachingCompilerHost.prototype.getNewLine= function (){ return  this.baseHost.getNewLine();};CachingCompilerHost.prototype.dirExists= function (directoryPath){ if (Utils.hasProperty(this.dirExistsCache,directoryPath)){ return  this.dirExistsCache[directoryPath];} this.dirExistsCacheSize++; return  this.dirExistsCache[directoryPath]=ts.sys.directoryExists(directoryPath);}; return CachingCompilerHost;})();exports.CachingCompilerHost=CachingCompilerHost;var CompileStream=(function (_super){__extends(CompileStream,_super); function CompileStream(opts){_super.call(this,{objectMode: true });}CompileStream.prototype._read= function (){}; return CompileStream;})(stream.Readable);exports.CompileStream=CompileStream;var StatisticsReporter=(function (){ function StatisticsReporter(){}StatisticsReporter.prototype.reportTitle= function (name){Logger.log(name);};StatisticsReporter.prototype.reportValue= function (name,value){Logger.log(this.padRight(name+":",25)+chalk.magenta(this.padLeft(value.toString(),10)));};StatisticsReporter.prototype.reportCount= function (name,count){ this.reportValue(name,""+count);};StatisticsReporter.prototype.reportTime= function (name,time){ this.reportValue(name,(time/1000).toFixed(2)+"s");};StatisticsReporter.prototype.reportPercentage= function (name,percentage){ this.reportValue(name,percentage.toFixed(2)+"%");};StatisticsReporter.prototype.padLeft= function (s,length){ while (s.length<length){s=" "+s;} return s;};StatisticsReporter.prototype.padRight= function (s,length){ while (s.length<length){s=s+" ";} return s;}; return StatisticsReporter;})();exports.StatisticsReporter=StatisticsReporter;var TsVinylFile=(function (_super){__extends(TsVinylFile,_super); function TsVinylFile(options){_super.call(this,options);} return TsVinylFile;})(File);exports.TsVinylFile=TsVinylFile;var BundleParser=(function (){ function BundleParser(){}BundleParser.prototype.parseConfigFile= function (json,basePath){ var errors=[]; return {bundles:getBundles(),errors:errors}; function getBundles(){ var bundles=[]; var jsonBundles=json["bundles"]; if (jsonBundles){Logger.info(jsonBundles); for (var id in jsonBundles){Logger.info("Bundle Id: ",id,jsonBundles[id]); var jsonBundle=jsonBundles[id]; var bundleName; var fileNames=[]; var config={};bundleName=path.join(basePath,id); if (Utils.hasProperty(jsonBundle,"files")){ if (jsonBundle["files"] instanceof Array){fileNames=Utils.map(jsonBundle["files"], function (s){ return path.join(basePath,s);});Logger.info("bundle files: ",fileNames);} else {errors.push(TsCore.createDiagnostic({code:6063,category:ts.DiagnosticCategory.Error,key:"Bundle '{0}' files is not an array."},id));}} else {errors.push(TsCore.createDiagnostic({code:6062,category:ts.DiagnosticCategory.Error,key:"Bundle '{0}' requires an array of files."},id));} if (Utils.hasProperty(jsonBundle,"config")){config=jsonBundle.config;}bundles.push({name:bundleName,fileNames:fileNames,config:config});}} return bundles;}}; return BundleParser;})();exports.BundleParser=BundleParser;var Compiler=(function (){ function Compiler(compilerHost,program,compileStream){ this.preEmitTime=0; this.emitTime=0; this.compileTime=0; this.compilerHost=compilerHost; this.program=program; this.compileStream=compileStream; this.compilerOptions= this.program.getCompilerOptions();}Compiler.prototype.compile= function (onError){ this.compileTime= this.preEmitTime= new Date().getTime();Logger.log("Compiling project files..."); var diagnostics=ts.getPreEmitDiagnostics(this.program); if (this.compilerOptions.noEmitOnError&&diagnostics.length>0){ return  new CompilerResult(ts.ExitStatus.DiagnosticsPresent_OutputsSkipped,diagnostics);} this.preEmitTime= new Date().getTime()- this.preEmitTime; if (!this.compilerOptions.noEmit){ var a= new Date().getTime(); var emitResult= this.program.emit(); this.emitTime= new Date().getTime()-a;diagnostics=diagnostics.concat(emitResult.diagnostics); if (emitResult.emitSkipped){ return  new CompilerResult(ts.ExitStatus.DiagnosticsPresent_OutputsSkipped,diagnostics);} var fileOutput= this.compilerHost.getOutput(); for (var fileName in fileOutput){ var fileData=fileOutput[fileName]; var tsVinylFile= new TsVinylFile({path:fileName,contents: new Buffer(fileData)}); this.compileStream.push(tsVinylFile);}} this.compileTime= new Date().getTime()- this.compileTime; if (diagnostics.length>0){ return  new CompilerResult(ts.ExitStatus.DiagnosticsPresent_OutputsGenerated,diagnostics);} if (this.compilerOptions.diagnostics){ this.reportStatistics();} return  new CompilerResult(ts.ExitStatus.Success);};Compiler.prototype.reportStatistics= function (){ var a= new StatisticsReporter();a.reportCount("Files", this.program.getSourceFiles().length);a.reportCount("Lines", this.compiledLines());a.reportTime("Pre-emit time", this.preEmitTime);a.reportTime("Emit time", this.emitTime);a.reportTime("Compile time", this.compileTime);};Compiler.prototype.compiledLines= function (){ var _this= this; var count=0;Utils.forEach(this.program.getSourceFiles(), function (file){ if (!TsCore.isDeclarationFile(file)){count+=_this.getLineStarts(file).length;}}); return count;};Compiler.prototype.getLineStarts= function (sourceFile){ return sourceFile.getLineStarts();}; return Compiler;})();exports.Compiler=Compiler;var WatchCompilerHost=(function (_super){__extends(WatchCompilerHost,_super); function WatchCompilerHost(compilerOptions,onSourceFileChanged){ var _this= this;_super.call(this,compilerOptions); this.getSourceFile= function (fileName,languageVersion,onError){ if (_this.reuseableProgram){ var b_1=_this.reuseableProgram.getSourceFile(fileName); if (b_1&&b_1.fileWatcher){ return b_1;}} var a=_super.prototype.getSourceFileImpl.call(_this,fileName,languageVersion,onError); if (a&&_this.compilerOptions.watch){a.fileWatcher=chokidar.watch(a.fileName);a.fileWatcher.on("change", function (path,stats){ return _this.onSourceFileChanged(a,path,stats);});} return a;}; this.onSourceFileChanged=onSourceFileChanged;}WatchCompilerHost.prototype.setReuseableProgram= function (program){ this.reuseableProgram=program;}; return WatchCompilerHost;})(CachingCompilerHost);exports.WatchCompilerHost=WatchCompilerHost;var _= require("lodash");var fileGlob= require("glob");var Glob=(function (){ function Glob(){}Glob.prototype.hasPattern= function (pattern){ var g= new fileGlob.Glob(pattern); var minimatchSet=g.minimatch.set; if (minimatchSet.length>1) return  true; for (var j=0;j<minimatchSet[0].length;j++){ if (typeof minimatchSet[0][j]!=='string') return  true;} return  false;};Glob.prototype.expand= function (patterns,root){ if (patterns.length===0){ return [];} var matches= this.processPatterns(patterns, function (pattern){ return fileGlob.sync(pattern,{root:root});}); return matches;};Glob.prototype.processPatterns= function (patterns,fn){ var result=[];_.flatten(patterns).forEach(function (pattern){ var exclusion; var matches;exclusion=_.isString(pattern)&&pattern.indexOf("!")===0; if (exclusion){pattern=pattern.slice(1);}matches=fn(pattern); if (exclusion){ return result=_.difference(result,matches);} else { return result=_.union(result,matches);}}); return result;}; return Glob;})();exports.Glob=Glob;var BundleResult=(function (){ function BundleResult(status,errors,bundleSource){ this.status=status; this.errors=errors; this.bundleSource=bundleSource;}BundleResult.prototype.getBundleSource= function (){ return  this.bundleSource;};BundleResult.prototype.getErrors= function (){ return  this.errors;};BundleResult.prototype.getStatus= function (){ return  this.status;};BundleResult.prototype.succeeded= function (){ return (this.status===ts.ExitStatus.Success);}; return BundleResult;})();exports.BundleResult=BundleResult;var DependencyBuilder=(function (){ function DependencyBuilder(host,program){ this.moduleImportsByName={}; this.host=host; this.program=program; this.options= this.program.getCompilerOptions();}DependencyBuilder.prototype.getSourceFileDependencies= function (sourceFile){ var self= this; var dependencies={}; var importWalked={}; function walkModuleImports(importNodes){importNodes.forEach(function (importNode){ var a=self.getSymbolFromNode(importNode); var b=self.getSourceFileFromSymbol(a); var c=self.host.getCanonicalFileName(b.fileName);Logger.info("Import symbol file name: ",c); if (!Utils.hasProperty(importWalked,c)){importWalked[c]= true;walkModuleImports(self.getImportsOfModule(b));} if (!Utils.hasProperty(dependencies,c)){Logger.info("Adding module import dependencies for file: ",c);dependencies[c]=self.getImportsOfModule(b);}});} var sourceFileImports=self.getImportsOfModule(sourceFile);walkModuleImports(sourceFileImports); var a=self.host.getCanonicalFileName(sourceFile.fileName); if (!Utils.hasProperty(dependencies,a)){Logger.info("Adding top level import dependencies for file: ",a);dependencies[a]=sourceFileImports;} return dependencies;};DependencyBuilder.prototype.getImportsOfModule= function (file){ var importNodes=[]; var self= this; function getImports(searchNode){ts.forEachChild(searchNode, function (node){ if (node.kind===222||node.kind===221||node.kind===228){Logger.info("Found import declaration"); var a=TsCore.getExternalModuleName(node); if (a&&a.kind===9){ var b=self.program.getTypeChecker().getSymbolAtLocation(a); if (b){Logger.info("Adding import symbol: ",b.name,file.fileName);importNodes.push(node);} else {Logger.warn("Module symbol not found");}}} else  if (node.kind===218&&node.name.kind===9&&(node.flags&2||TsCore.isDeclarationFile(file))){ var moduleDeclaration=node;Logger.info("Processing ambient module declaration: ",moduleDeclaration.name.text);getImports(node.body);}});};getImports(file); return importNodes;};DependencyBuilder.prototype.isExternalModuleImportEqualsDeclaration= function (node){ return node.kind===221&&node.moduleReference.kind===232;};DependencyBuilder.prototype.getExternalModuleImportEqualsDeclarationExpression= function (node){ return node.moduleReference.expression;};DependencyBuilder.prototype.getSymbolFromNode= function (node){ var a=TsCore.getExternalModuleName(node); if (a&&a.kind===9){ return  this.program.getTypeChecker().getSymbolAtLocation(a);}};DependencyBuilder.prototype.getSourceFileFromNode= function (importNode){ return importNode.getSourceFile();};DependencyBuilder.prototype.getSourceFileFromSymbol= function (importSymbol){ var a=importSymbol.getDeclarations()[0]; var b=a.kind===248&&!(a.flags&8192); var c=a.getSourceFile(); return c;}; return DependencyBuilder;})();exports.DependencyBuilder=DependencyBuilder;var Ast;(function (Ast){(function (ContainerFlags){ContainerFlags[ContainerFlags["None"]=0]="None";ContainerFlags[ContainerFlags["IsContainer"]=1]="IsContainer";ContainerFlags[ContainerFlags["IsBlockScopedContainer"]=2]="IsBlockScopedContainer";ContainerFlags[ContainerFlags["HasLocals"]=4]="HasLocals";ContainerFlags[ContainerFlags["IsContainerWithLocals"]=5]="IsContainerWithLocals";})(Ast.ContainerFlags||(Ast.ContainerFlags={})); var ContainerFlags=Ast.ContainerFlags; function isFunctionLike(node){ if (node){ switch (node.kind){ case 144: case 173: case 213: case 174: case 143: case 142: case 145: case 146: case 147: case 148: case 149: case 152: case 153: return  true;}} return  false;}Ast.isFunctionLike=isFunctionLike; function getContainerFlags(node){ switch (node.kind){ case 186: case 214: case 215: case 217: case 155: case 165: return 1; case 147: case 148: case 149: case 143: case 142: case 213: case 144: case 145: case 146: case 152: case 153: case 173: case 174: case 218: case 248: case 216: return 5; case 244: case 199: case 200: case 201: case 220: return 2; case 192: return isFunctionLike(node.parent)?0:2;} return 0;}Ast.getContainerFlags=getContainerFlags; function isBlockScopedVariable(node){ var a=(node.kind===211)?node.parent:node.declarationList; return isNodeFlagSet(a,16384)||isNodeFlagSet(a,32768);}Ast.isBlockScopedVariable=isBlockScopedVariable; function isBlockScopedBindingElement(node){ var a=getBindingElementVariableDeclaration(node); return (a== null)||isBlockScopedVariable(a);}Ast.isBlockScopedBindingElement=isBlockScopedBindingElement; function getBindingElementVariableDeclaration(node){ var a=node.parent; while (a.kind!==211){ if (a.parent== null){ return  null;} else {a=a.parent;}} return a;}Ast.getBindingElementVariableDeclaration=getBindingElementVariableDeclaration; function isNodeFlagSet(node,flagToCheck){ return (node.flags&flagToCheck)!==0;}Ast.isNodeFlagSet=isNodeFlagSet; function isKeyword(token){ return 70<=token&&token<=134;}Ast.isKeyword=isKeyword; function isTrivia(token){ return 2<=token&&token<=7;}Ast.isTrivia=isTrivia; function displaySymbolFlags(flags){ if (flags&1){console.log("Symbol flag: FunctionScopedVariable");} if (flags&2){console.log("Symbol flag: BlockScopedVariable ");} if (flags&4){console.log("Symbol flag: Property");} if (flags&8){console.log("Symbol flag: EnumMember");} if (flags&16){console.log("Symbol flag: Function");} if (flags&32){console.log("Symbol flag: Class");} if (flags&64){console.log("Symbol flag: Interface");} if (flags&128){console.log("Symbol flag: ConstEnum");} if (flags&256){console.log("Symbol flag: RegularEnum");} if (flags&512){console.log("Symbol flag: ValueModule");} if (flags&1024){console.log("Symbol flag: NamespaceModule");} if (flags&2048){console.log("Symbol flag: TypeLiteral");} if (flags&4096){console.log("Symbol flag: ObjectLiteral");} if (flags&8192){console.log("Symbol flag: Method");} if (flags&16384){console.log("Symbol flag: Constructor");} if (flags&32768){console.log("Symbol flag: GetAccessor");} if (flags&65536){console.log("Symbol flag: SetAccessor");} if (flags&131072){console.log("Symbol flag: Signature");} if (flags&262144){console.log("Symbol flag: TypeParameter");} if (flags&524288){console.log("Symbol flag: TypeAlias");} if (flags&1048576){console.log("Symbol flag: ExportValue");} if (flags&2097152){console.log("Symbol flag: ExportType");} if (flags&4194304){console.log("Symbol flag: ExportNamespace");} if (flags&8388608){console.log("Symbol flag: Alias");} if (flags&16777216){console.log("Symbol flag: Instantiated");} if (flags&33554432){console.log("Symbol flag: Merged");} if (flags&67108864){console.log("Symbol flag: Transient");} if (flags&134217728){console.log("Symbol flag: Prototype");} if (flags&268435456){console.log("Symbol flag: SyntheticProperty");} if (flags&536870912){console.log("Symbol flag: Optional");} if (flags&1073741824){console.log("Symbol flag: ExportStar");}}Ast.displaySymbolFlags=displaySymbolFlags; function displayNodeFlags(flags){ if (flags&1){console.log("Node flag: Export");} if (flags&2){console.log("Node flag: Ambient");} if (flags&16){console.log("Node Flag: Public");} if (flags&32){console.log("Node Flag: Private");} if (flags&128){console.log("Node Flag: Static");} if (flags&256){console.log("Node Flag: Abstract");} if (flags&512){console.log("Node Flag: Async");} if (flags&1024){console.log("Node Flag: Default");} if (flags&2048){console.log("Node Flag: MultiLine");} if (flags&4096){console.log("Node Flag: Synthetic");} if (flags&8192){console.log("Node Flag: DeclarationFile");} if (flags&16384){console.log("Node Flag: Let");} if (flags&32768){console.log("Node Flag: Const");} if (flags&65536){console.log("Node Flag: OctalLiteral");} if (flags&131072){console.log("Node Flag: Namespace");} if (flags&262144){console.log("Node Flag: ExportContext");} if (flags&524288){console.log("Node Flag: ContainsThis");} if (flags&2035){console.log("Node Flag: Modifier");} if (flags&112){console.log("Node Flag: AccessibilityModifier");} if (flags&49152){console.log("Node Flag: BlockScoped");}}Ast.displayNodeFlags=displayNodeFlags;})(Ast=exports.Ast||(exports.Ast={}));var IdentifierInfo=(function (){ function IdentifierInfo(identifier, symbol){ this.shortenedName=undefined; this.identifier=identifier; this.symbol = symbol; this.refs=[identifier];}IdentifierInfo.prototype.getName= function (){ return  this.symbol.name;};IdentifierInfo.prototype.getId= function (){ return  this.symbol.id;};IdentifierInfo.prototype.getUniqueName= function (){ return  this.getId().toString();};IdentifierInfo.prototype.isVariable= function (){ var a= this.getVariableDeclaration(); if (a) return  true; return  false;};IdentifierInfo.prototype.isFunction= function (){ var a= this.getFunctionDeclaration(); if (a) return  true; return  false;};IdentifierInfo.prototype.isBlockScopedVariable= function (){ var a= this.getVariableDeclaration(); if (a){ return ((a.parent.flags&16384)!==0)||((a.parent.flags&32768)!==0);} return  false;};IdentifierInfo.prototype.getVariableDeclaration= function (){ if (this.symbol.name==="pathLen"){ var a=1;} switch (this.identifier.parent.kind){ case 211: return  this.identifier.parent; break; case 212: break; case 193: break;} return  null;};IdentifierInfo.prototype.getFunctionDeclaration= function (){ var a= this.identifier.parent; while (a.kind!==213){ if (a.parent== null){ return  null;} else {a=a.parent;}} return a;};IdentifierInfo.prototype.isVisible= function (){ return  true;}; return IdentifierInfo;})();exports.IdentifierInfo=IdentifierInfo;var NodeWalker=(function (){ function NodeWalker(){}NodeWalker.prototype.walk= function (node){ this.visitNode(node);};NodeWalker.prototype.visitNode= function (node){ this.walkChildren(node);};NodeWalker.prototype.walkChildren= function (node){ var _this= this;ts.forEachChild(node, function (child){ return _this.visitNode(child);});}; return NodeWalker;})();exports.NodeWalker=NodeWalker;var NameGenerator=(function (){ function NameGenerator(){ this.base64Chars="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_0123456789"; this.index=0;}NameGenerator.prototype.getName= function (){ var a=["do","if","in","for","int","let","new","try","var"]; var b; while (true){b= this.generateName(); if (a.indexOf(b)>0){ continue;} else { return b;}}};NameGenerator.prototype.reset= function (){ this.index=0;};NameGenerator.prototype.generateName= function (){ var a= this.index; var b= this.base64Chars[a%54];a=Math.floor(a/54); while (a>0){b+= this.base64Chars[a%64];a=Math.floor(a/64);} this.index++; return b;}; return NameGenerator;})();exports.NameGenerator=NameGenerator;var ContainerContext=(function (){ function ContainerContext(node,containerFlags,parentContainer){ this.childContainers=[]; this.namesExcluded={}; this.excludedIdentifiers={}; this.symbolTable={}; this.shortenedIdentifierCount=0; this.containerFlags=containerFlags; if (containerFlags&1){ this.container= this.blockScopeContainer=node; this.isBlockScope= false; this.parent= this;} else  if (containerFlags&2){ this.blockScopeContainer=node; this.isBlockScope= true; this.parent=parentContainer.getParent();}}ContainerContext.prototype.addChildContainer= function (container){ this.childContainers.push(container);};ContainerContext.prototype.getChildren= function (){ return  this.childContainers;};ContainerContext.prototype.getParent= function (){ return  this.parent;};ContainerContext.prototype.getNode= function (){ return  this.isBlockScope? this.blockScopeContainer: this.container;};ContainerContext.prototype.getLocals= function (){ if (this.isBlockScope) return  this.blockScopeContainer.locals; else return  this.container.locals;};ContainerContext.prototype.isFunctionScoped= function (){ if (this.containerFlags&(1|5)){ return  true;} return  false;}; return ContainerContext;})();exports.ContainerContext=ContainerContext;var Debug;(function (Debug){ function assert(condition,message){ if (!condition){message=message||"Assertion failed"; if (typeof Error!=="undefined"){ throw  new Error(message);} throw message;}}Debug.assert=assert;})(Debug=exports.Debug||(exports.Debug={}));var BundleMinifier=(function (_super){__extends(BundleMinifier,_super); function BundleMinifier(program,compilerOptions){_super.call(this); this.allIdentifierSymbols={}; this.identifierCount=0; this.shortenedIdentifierCount=0; this.program=program; this.checker=program.getTypeChecker(); this.compilerOptions=compilerOptions; this.containerStack=[]; this.nameGenerator= new NameGenerator();}BundleMinifier.prototype.transform= function (bundleSourceFile){ this.bundleSourceFile=bundleSourceFile; return  this.processBundleIdentifiers(bundleSourceFile);};BundleMinifier.prototype.removeWhitespace= function (jsContents){ this.whiteSpaceTime= new Date().getTime(); this.whiteSpaceBefore=jsContents.length; var a=""; var b=0; var c; var d=ts.createScanner(1, false,0,jsContents); while ((c=d.scan())!==1){ switch (c){ case 5: if (Ast.isKeyword(b)){ var e=d.getTokenText();a+=e;} break; case 4: break; default: if (Ast.isKeyword(c)&&(b===5)){a+=" ";}a+=d.getTokenText(); break;}b=c;} this.whiteSpaceAfter=a.length; this.whiteSpaceTime= new Date().getTime()- this.whiteSpaceTime; if (this.compilerOptions.diagnostics) this.reportWhitespaceStatistics(); return a;};BundleMinifier.prototype.visitNode= function (node){ if (this.isNextContainer(node)){_super.prototype.visitNode.call(this,node); this.restoreContainer();} else { switch (node.kind){ case 69: var a=node; var b=a.flags; var c= this.checker.getSymbolAtLocation(a); if (c){ var d=c.id; if (d!==undefined){ var e=d.toString(); if (Utils.hasProperty(this.allIdentifierSymbols,e)){ var f= this.allIdentifierSymbols[e]; this.allIdentifierSymbols[e].refs.push(a); if (!Utils.hasProperty(this.currentContainer().symbolTable,e)){ this.currentContainer().excludedIdentifiers[e]=f; if ((!f.isBlockScopedVariable)||(this.compilerOptions.target===1)){ this.currentContainer().getParent().excludedIdentifiers[e]=f;}}} else { var g= new IdentifierInfo(a,c); this.currentContainer().symbolTable[e]=g; this.allIdentifierSymbols[e]=g; var h=c.getName(); if (h.length===1){g.shortenedName=h; this.currentContainer().namesExcluded[c.getName()]= true;} this.identifierCount++;}} else {}} else {} break; default:}_super.prototype.visitNode.call(this,node);}};BundleMinifier.prototype.processBundleIdentifiers= function (sourceFile){ this.transformTime= new Date().getTime(); this.walk(sourceFile); this.shortenContainerIdentifiers(this.sourceFileContainer); this.transformTime= new Date().getTime()- this.transformTime; if (this.compilerOptions.diagnostics) this.reportMinifyStatistics(); return sourceFile;};BundleMinifier.prototype.shortenContainerIdentifiers= function (container){ if (this.compilerOptions.target===1){ if (container.isFunctionScoped()){ this.nameGenerator.reset();}} else { this.nameGenerator.reset();} var a; for (var d in container.excludedIdentifiers){a=container.excludedIdentifiers[d]; if (a.shortenedName){container.namesExcluded[a.shortenedName]= true;} else {}} var b=container.getParent(); if (b){ for (var e in b.excludedIdentifiers){a=b.excludedIdentifiers[e]; if (a.shortenedName){container.namesExcluded[a.shortenedName]= true;} else {}}} for (var f in container.symbolTable){ var g=container.symbolTable[f]; this.processIdentifierSymbolInfo(container,g);} var c=container.getChildren(); for (var j=0;j<c.length;j++){ this.shortenContainerIdentifiers(c[j]);}};BundleMinifier.prototype.processIdentifierSymbolInfo= function (container,identifierInfo){ var _this= this; if (identifierInfo.isBlockScopedVariable()){ var a= this.getShortenedIdentifierName(container,identifierInfo);Logger.info("Block scoped var renamed: ",identifierInfo.getName(),a);Utils.forEach(identifierInfo.refs, function (identifier){_this.setIdentifierText(identifier,a);}); return;}};BundleMinifier.prototype.getShortenedIdentifierName= function (container,identifierInfo){ if (!identifierInfo.shortenedName){ var a=identifierInfo.getName(); if (a.length===1){identifierInfo.shortenedName=a;} else { while (true){ var b= this.nameGenerator.getName();Debug.assert(b.length<=a.length); if (!Utils.hasProperty(container.namesExcluded,b)){identifierInfo.shortenedName=b; break;} else {Logger.info("Generated name was excluded: ",b,a);}} this.shortenedIdentifierCount++;}} return identifierInfo.shortenedName;};BundleMinifier.prototype.setIdentifierText= function (identifier,text){identifier.text=text;text=" "+text+" ";identifier.end=identifier.pos+text.length-1; for (var i=0;i<text.length;i++){ this.bundleSourceFile.text=Utils.replaceAt(this.bundleSourceFile.text,identifier.pos+i,text[i]);}};BundleMinifier.prototype.analyzeContainerIdentifiers= function (){ var _this= this; var symbolTableKeys=Object.keys(this.currentContainer().symbolTable); var a=symbolTableKeys.length;Logger.log("Identifier count: ",a); var b=a%54; var c=a-b; var d=((2*c)+b)/a;Logger.log("Compression ratio: ",d); var e= this.currentContainer().symbolTable;symbolTableKeys.sort(function (a,b){ var c=e[b].refs.length*(e[b].getName().length-d); var f=e[a].refs.length*(e[a].getName().length-d); return (c-f);}); var f=0; var g=0; var h=0;symbolTableKeys.forEach(function (key){ var a=_this.currentContainer().symbolTable[key];a.shortenedName=_this.nameGenerator.getName(); var b=(a.getName().length*a.refs.length); var c=(a.shortenedName.length*a.refs.length);Logger.log("Compression of symbol: ",a.getName(),b,c,b-c);f+=b;g+=c;});Logger.log("Total Compression: ",f,g);};BundleMinifier.prototype.currentContainer= function (){ return  this.containerStack[this.containerStack.length-1];};BundleMinifier.prototype.restoreContainer= function (){ return  this.containerStack.pop();};BundleMinifier.prototype.isNextContainer= function (node){ var a=Ast.getContainerFlags(node); if (a&(1|2)){ var b= new ContainerContext(node,a, this.currentContainer()); var c= this.currentContainer(); if (!c){ this.sourceFileContainer=b;} else {c.addChildContainer(b);} this.containerStack.push(b); return  true;} return  false;};BundleMinifier.prototype.reportWhitespaceStatistics= function (){ var a= new StatisticsReporter();a.reportTime("Whitespace time", this.whiteSpaceTime);a.reportPercentage("Whitespace reduction",((this.whiteSpaceBefore- this.whiteSpaceAfter)/ this.whiteSpaceBefore)*100.00);};BundleMinifier.prototype.reportMinifyStatistics= function (){ var a= new StatisticsReporter();a.reportTime("Minify time", this.transformTime);a.reportCount("Total identifiers", this.identifierCount);a.reportCount("Identifiers shortened", this.shortenedIdentifierCount);}; return BundleMinifier;})(NodeWalker);exports.BundleMinifier=BundleMinifier;var DiagnosticsReporter=(function (){ function DiagnosticsReporter(){}DiagnosticsReporter.reportDiagnostics= function (diagnostics){ if (!diagnostics){ return;} for (var i=0;i<diagnostics.length;i++){ this.reportDiagnostic(diagnostics[i]);}};DiagnosticsReporter.reportDiagnostic= function (diagnostic){ if (!diagnostic){ return;} var output=""; if (diagnostic.file){ var loc=ts.getLineAndCharacterOfPosition(diagnostic.file,diagnostic.start);output+=chalk.gray(diagnostic.file.fileName+"("+(loc.line+1)+","+(loc.character+1)+"): ");} var category; switch (diagnostic.category){ case ts.DiagnosticCategory.Error:category=chalk.red(ts.DiagnosticCategory[diagnostic.category].toLowerCase()); break; case ts.DiagnosticCategory.Warning:category=chalk.yellow(ts.DiagnosticCategory[diagnostic.category].toLowerCase()); break; default:category=chalk.green(ts.DiagnosticCategory[diagnostic.category].toLowerCase());}output+=category+" TS"+chalk.white(diagnostic.code+'')+": "+chalk.grey(ts.flattenDiagnosticMessageText(diagnostic.messageText,"\n"));Logger.log(output);}; return DiagnosticsReporter;})();exports.DiagnosticsReporter=DiagnosticsReporter;var ProjectBuildContext=(function (){ function ProjectBuildContext(host,config,program){ this.host=host; this.setProgram(program); this.config=config;}ProjectBuildContext.prototype.isWatchMode= function (){ this.config.compilerOptions.watch|| false;};ProjectBuildContext.prototype.getProgram= function (){ return  this.program;};ProjectBuildContext.prototype.setProgram= function (program){ if (this.program){ var a=program?program.getSourceFiles():undefined;Utils.forEach(this.program.getSourceFiles(), function (sourceFile){ if (!(a&&Utils.contains(a,sourceFile))){ var b=sourceFile; if (b.fileWatcher){b.fileWatcher.unwatch(b.fileName);}}});} this.host.setReuseableProgram(program); this.program=program;}; return ProjectBuildContext;})();exports.ProjectBuildContext=ProjectBuildContext;var BundleBuilder=(function (){ function BundleBuilder(compilerHost,program){ this.dependencyTime=0; this.dependencyWalkTime=0; this.emitTime=0; this.buildTime=0; this.bundleText=""; this.bundleImportedFiles={}; this.bundleModuleImports={}; this.bundleSourceFiles={}; this.compilerHost=compilerHost; this.program=program;}BundleBuilder.prototype.build= function (bundle){ var _this= this; this.buildTime= new Date().getTime(); var a= new DependencyBuilder(this.compilerHost, this.program); var b=path.dirname(bundle.name); if (bundle.config.outDir){b=path.join(b,bundle.config.outDir);} var c=path.join(b,path.basename(bundle.name));c=TsCore.normalizeSlashes(c); this.bundleText=""; this.bundleImportedFiles={}; this.bundleModuleImports={}; this.bundleSourceFiles={}; var isBundleTsx= false; var d={}; for (var filesKey in bundle.fileNames){ var c=bundle.fileNames[filesKey];Logger.info(">>> Processing bundle file:",c); var e= this.compilerHost.getCanonicalFileName(TsCore.normalizeSlashes(c));Logger.info("BundleSourceFileName:",e); var f_1= this.program.getSourceFile(e); if (!f_1){ var i=TsCore.createDiagnostic({code:6060,category:ts.DiagnosticCategory.Error,key:"Bundle Source File '{0}' not found."},e); return  new BundleResult(ts.ExitStatus.DiagnosticsPresent_OutputsSkipped,[i]);} if (f_1.languageVariant==1){isBundleTsx= true;} var g= new Date().getTime(); var h=a.getSourceFileDependencies(f_1); this.dependencyTime+= new Date().getTime()-g; for (var mergeKey in h){ if (!Utils.hasProperty(d,mergeKey)){d[mergeKey]=h[mergeKey];}}g= new Date().getTime();Logger.info("traversing source dependencies for: ",f_1.fileName); for (var depKey in h){h[depKey].forEach(function (importNode){ var importSymbol=_this.getSymbolFromNode(importNode); if (_this.isCodeModule(importSymbol)){ var a=importSymbol.getDeclarations()[0]; var b=a.getSourceFile(); var c=b.fileName; if (!Utils.hasProperty(_this.bundleImportedFiles,c)){_this.addSourceFile(b);}} else { if (importNode.kind===221){ var d=importNode.name.text; var moduleName=_this.getImportModuleName(importNode); if (_this.addModuleImport(moduleName,d)){_this.emitModuleImportDeclaration(importNode.getText());}} else {_this.writeImportDeclaration(importNode);}}});} this.addSourceFile(f_1); this.dependencyWalkTime+= new Date().getTime()-g;} var bundleExtension=isBundleTsx?".tsx":".ts"; var bundleSourceFile={path:c+bundleExtension,extension:bundleExtension,text: this.bundleText}; this.buildTime= new Date().getTime()- this.buildTime; if (this.program.getCompilerOptions().diagnostics){ this.reportStatistics();} return  new BundleResult(ts.ExitStatus.Success,undefined,bundleSourceFile);};BundleBuilder.prototype.getImportModuleName= function (node){ if (node.moduleReference.kind===232){ var a=node.moduleReference; return a.expression.text;} else { return node.moduleReference.getText();}};BundleBuilder.prototype.addModuleImport= function (moduleName,importName){ if (!Utils.hasProperty(this.bundleModuleImports,moduleName)){ this.bundleModuleImports[moduleName]={};} var moduleImports= this.bundleModuleImports[moduleName]; if (!Utils.hasProperty(moduleImports,importName)){moduleImports[importName]=importName; return  true;} return  false;};BundleBuilder.prototype.writeImportDeclaration= function (node){ var _this= this; if (!node.importClause){ return;} var a=node.moduleSpecifier.text; var importToWrite="import "; var hasDefaultBinding= false; var hasNamedBindings= false; if (node.importClause){ if (node.importClause.name&& this.addModuleImport(a,node.importClause.name.text)){importToWrite+=node.importClause.name.text;hasDefaultBinding= true;}} if (node.importClause.namedBindings){ if (node.importClause.namedBindings.kind===224){ if (this.addModuleImport(a,node.importClause.namedBindings.name.text)){ if (hasDefaultBinding){importToWrite+=", ";}importToWrite+="* as ";importToWrite+=node.importClause.namedBindings.name.text;hasNamedBindings= true;}} else { if (hasDefaultBinding){importToWrite+=", ";}importToWrite+="{ ";Utils.forEach(node.importClause.namedBindings.elements, function (element){ if (_this.addModuleImport(a,element.name.text)){ if (!hasNamedBindings){hasNamedBindings= true;} else {importToWrite+=", ";} var b=element.propertyName; if (b){importToWrite+=b.text+" as "+element.name.text;} else {importToWrite+=element.name.text;}}});importToWrite+=" }";}}importToWrite+=" from ";importToWrite+=node.moduleSpecifier.getText();importToWrite+=";"; if (hasDefaultBinding||hasNamedBindings){ this.emitModuleImportDeclaration(importToWrite);}};BundleBuilder.prototype.processImportStatements= function (file){ var _this= this;Logger.info("Processing import statements in file: ",file.fileName); var a=file.text;ts.forEachChild(file, function (node){ if (node.kind===222||node.kind===221||node.kind===228){Logger.info("processImportStatements() found import"); var b=TsCore.getExternalModuleName(node); if (b&&b.kind===9){ var c=_this.program.getTypeChecker().getSymbolAtLocation(b); if ((c)&&(_this.isCodeModule(c)||_this.isAmbientModule)){Logger.info("processImportStatements() removing code module symbol"); var d=node.pos; var e=node.end; var f_2=e-d; var g=""; for (var i=0;i<f_2;i++){g+=" ";} var prefix=a.substring(0,d); var suffix=a.substring(e);a=prefix+g+suffix;}}}}); return a;};BundleBuilder.prototype.emitModuleImportDeclaration= function (moduleBlockText){Logger.info("Entering emitModuleImportDeclaration()"); this.bundleText+=moduleBlockText+"\n";};BundleBuilder.prototype.addSourceFile= function (file){Logger.info("Entering addSourceFile() with: ",file.fileName); if (this.isCodeSourceFile(file)){ var a= this.processImportStatements(file); this.bundleText+=a+"\n"; this.bundleImportedFiles[file.fileName]=file.fileName;} else { if (!Utils.hasProperty(this.bundleSourceFiles,file.fileName)){Logger.info("Adding definition file to bundle source context: ",file.fileName); this.bundleSourceFiles[file.fileName]=file.text;}}};BundleBuilder.prototype.isCodeSourceFile= function (file){ return (file.kind===248&&!(file.flags&8192));};BundleBuilder.prototype.isCodeModule= function (importSymbol){ var a=importSymbol.getDeclarations()[0]; return (a.kind===248&&!(a.flags&8192));};BundleBuilder.prototype.isAmbientModule= function (importSymbol){ var a=importSymbol.getDeclarations()[0]; return ((a.kind===218)&&((a.flags&2)>0));};BundleBuilder.prototype.getSymbolFromNode= function (node){ var a=TsCore.getExternalModuleName(node); if (a&&a.kind===9){ return  this.program.getTypeChecker().getSymbolAtLocation(a);}};BundleBuilder.prototype.reportStatistics= function (){ var a= new StatisticsReporter();a.reportTime("Deps gen time", this.dependencyTime);a.reportTime("Deps walk time", this.dependencyWalkTime);a.reportTime("Source gen time", this.buildTime);}; return BundleBuilder;})();exports.BundleBuilder=BundleBuilder;var BundleCompiler=(function (){ function BundleCompiler(compilerHost,program,outputStream){ this.emitTime=0; this.compileTime=0; this.preEmitTime=0; this.bundleSourceFiles={}; this.compilerHost=compilerHost; this.program=program; this.outputStream=outputStream; this.compilerOptions= this.program.getCompilerOptions();}BundleCompiler.prototype.compile= function (bundleFile,bundleConfig){ var _this= this;Logger.log("Compiling bundle..."); this.compileTime= this.preEmitTime= new Date().getTime(); var a=[]; var b; var c; var d;Utils.forEach(this.program.getSourceFiles(), function (file){a.push(file.fileName);}); var e={}; var f; var g=bundleConfig.minify|| false; if (g){ var a_1=path.dirname(bundleFile.path); var c_1=path.basename(bundleFile.path,bundleFile.extension);b=TsCore.normalizeSlashes(path.join(a_1,c_1+".min.ts"));} else {b=bundleFile.path;}c=bundleFile.text; this.bundleSourceFiles[b]=c;d=ts.createSourceFile(b,bundleFile.text, this.compilerOptions.target);a.push(b);Utils.forEach(this.program.getSourceFiles(), function (file){_this.bundleSourceFiles[file.fileName]=file.text;}); function writeFile(fileName,data,writeByteOrderMark,onError){e[fileName]=data;} function getSourceFile(fileName,languageVersion,onError){ if (fileName===b){ return d;} var a=f(fileName,languageVersion,onError); return a;}f= this.compilerHost.getSourceFile; this.compilerHost.getSourceFile=getSourceFile; this.compilerHost.writeFile=writeFile; var h= this.compilerOptions;h.declaration=bundleConfig.declaration|| this.compilerOptions.declaration;h.sourceMap=bundleConfig.sourceMap|| this.compilerOptions.sourceMap;h.noEmit= false; if (g){h.removeComments= true;} var bundlerProgram=ts.createProgram(a,h, this.compilerHost); var preEmitDiagnostics=ts.getPreEmitDiagnostics(bundlerProgram); this.preEmitTime= new Date().getTime()- this.preEmitTime; if (this.compilerOptions.noEmitOnError&&preEmitDiagnostics.length>0){ return  new CompilerResult(ts.ExitStatus.DiagnosticsPresent_OutputsSkipped,preEmitDiagnostics);} if (g){Logger.log("Minifying bundle..."); var a= new BundleMinifier(bundlerProgram,h);d=a.transform(d);} this.emitTime= new Date().getTime(); var emitResult=bundlerProgram.emit(d); this.emitTime= new Date().getTime()- this.emitTime; if (emitResult.emitSkipped){ return  new CompilerResult(ts.ExitStatus.DiagnosticsPresent_OutputsSkipped);} var i=preEmitDiagnostics.concat(emitResult.diagnostics); if (i.length>0){ return  new CompilerResult(ts.ExitStatus.DiagnosticsPresent_OutputsGenerated,i);}Logger.info("Streaming vinyl bundle source: ",b); var tsVinylFile= new TsVinylFile({path:b,contents: new Buffer(bundleFile.text)}); this.outputStream.push(tsVinylFile); var j=path.dirname(bundleFile.path); var k=path.basename(bundleFile.path,bundleFile.extension); var l=g?".min":""; var m=TsCore.normalizeSlashes(path.join(j,k+l+".js")); if (Utils.hasProperty(e,m)){ var a=e[m]; if (g){ var c= new BundleMinifier(bundlerProgram,h);a=c.removeWhitespace(a);}Logger.info("Streaming vinyl js: ",k); var bundleJsVinylFile= new TsVinylFile({path:m,contents: new Buffer(a)}); this.outputStream.push(bundleJsVinylFile);} var n=TsCore.normalizeSlashes(path.join(j,k+l+".d.ts")); if (Utils.hasProperty(e,n)){Logger.info("Streaming vinyl d.ts: ",n); var bundleDtsVinylFile= new TsVinylFile({path:n,contents: new Buffer(e[n])}); this.outputStream.push(bundleDtsVinylFile);} var o=TsCore.normalizeSlashes(path.join(j,k+l+".js.map")); if (Utils.hasProperty(e,o)){Logger.info("Streaming vinyl js.map: ",o); var bundleMapVinylFile= new TsVinylFile({path:o,contents: new Buffer(e[o])}); this.outputStream.push(bundleMapVinylFile);} this.compileTime= new Date().getTime()- this.compileTime; if (this.compilerOptions.diagnostics) this.reportStatistics(); return  new CompilerResult(ts.ExitStatus.Success);};BundleCompiler.prototype.reportStatistics= function (){ var a= new StatisticsReporter();a.reportTime("Pre-emit time", this.preEmitTime);a.reportTime("Emit time", this.emitTime);a.reportTime("Compile time", this.compileTime);}; return BundleCompiler;})();exports.BundleCompiler=BundleCompiler;var Project=(function (){ function Project(configFilePath,settings){ var _this= this; this.totalBuildTime=0; this.totalCompileTime=0; this.totalPreBuildTime=0; this.totalBundleTime=0; this.onConfigFileChanged= function (path,stats){_this.buildContext=undefined;_this.startRebuildTimer();}; this.onSourceFileChanged= function (sourceFile,path,stats){sourceFile.fileWatcher.unwatch(sourceFile.fileName);sourceFile.fileWatcher=undefined;_this.startRebuildTimer();}; this.onRebuildTimeout= function (){_this.rebuildTimer=undefined; var a=_this.buildWorker();_this.reportBuildStatus(a); if (_this.buildContext.config.compilerOptions.watch){Logger.log("Watching for project changes...");}}; this.configFilePath=configFilePath; this.settings=settings;}Project.prototype.build= function (outputStream){ var a= this.parseProjectConfig(); if (!a.success){DiagnosticsReporter.reportDiagnostics(a.errors); return ts.ExitStatus.DiagnosticsPresent_OutputsSkipped;} this.buildContext= this.createBuildContext(a);Logger.log("Building Project with: "+chalk.magenta(""+ this.configFileName));Logger.log("TypeScript compiler version: ",ts.version); this.outputStream=outputStream; var buildStatus= this.buildWorker(); this.reportBuildStatus(buildStatus); if (a.compilerOptions.watch){Logger.log("Watching for project changes...");} else { this.completeProjectBuild();} return buildStatus;};Project.prototype.createBuildContext= function (config){ if (config.compilerOptions.watch){ if (!this.watchProject()){config.compilerOptions.watch= false;}} var a= new WatchCompilerHost(config.compilerOptions, this.onSourceFileChanged); return  new ProjectBuildContext(a,config);};Project.prototype.watchProject= function (){ var _this= this; if (!ts.sys.watchFile){ var a=TsCore.createDiagnostic({code:5001,category:ts.DiagnosticCategory.Warning,key:"The current node host does not support the '{0}' option."},"-watch");DiagnosticsReporter.reportDiagnostic(a); return  false;} if (!this.configFileWatcher){ this.configFileWatcher=chokidar.watch(this.configFileName); this.configFileWatcher.on("change", function (path,stats){ return _this.onConfigFileChanged(path,stats);});} return  true;};Project.prototype.completeProjectBuild= function (){ this.outputStream.push(null);};Project.prototype.buildWorker= function (){ this.totalBuildTime= this.totalPreBuildTime= new Date().getTime(); if (!this.buildContext){ var g= this.parseProjectConfig(); if (!g.success){DiagnosticsReporter.reportDiagnostics(g.errors); return ts.ExitStatus.DiagnosticsPresent_OutputsSkipped;} this.buildContext= this.createBuildContext(g);} var a=[]; var b= this.buildContext.config.fileNames; var c= this.buildContext.config.bundles; var d= this.buildContext.config.compilerOptions; var e=ts.createProgram(b,d, this.buildContext.host, this.buildContext.getProgram()); this.totalPreBuildTime= new Date().getTime()- this.totalPreBuildTime; this.buildContext.setProgram(e); var f= new Compiler(this.buildContext.host,e, this.outputStream); this.totalCompileTime= new Date().getTime(); var compileResult=f.compile(); this.totalCompileTime= new Date().getTime()- this.totalCompileTime; if (!compileResult.succeeded()){DiagnosticsReporter.reportDiagnostics(compileResult.getErrors()); return compileResult.getStatus();} if (d.listFiles){Utils.forEach(this.buildContext.getProgram().getSourceFiles(), function (file){Logger.log(file.fileName);});} this.totalBundleTime= new Date().getTime(); var bundleBuilder= new BundleBuilder(this.buildContext.host, this.buildContext.getProgram()); var bundleCompiler= new BundleCompiler(this.buildContext.host, this.buildContext.getProgram(), this.outputStream); var bundleResult; for (var i=0,len=c.length;i<len;i++){Logger.log("Building bundle: ",chalk.cyan(c[i].name));bundleResult=bundleBuilder.build(c[i]); if (!bundleResult.succeeded()){DiagnosticsReporter.reportDiagnostics(bundleResult.getErrors()); return ts.ExitStatus.DiagnosticsPresent_OutputsSkipped;}compileResult=bundleCompiler.compile(bundleResult.getBundleSource(),c[i].config); if (!compileResult.succeeded()){DiagnosticsReporter.reportDiagnostics(compileResult.getErrors()); return compileResult.getStatus();}} this.totalBundleTime= new Date().getTime()- this.totalBundleTime; this.totalBuildTime= new Date().getTime()- this.totalBuildTime; if (d.diagnostics){ this.reportStatistics();} if (a.length>0){ return ts.ExitStatus.DiagnosticsPresent_OutputsGenerated;} return ts.ExitStatus.Success;};Project.prototype.parseProjectConfig= function (){ var _this= this; try { var isConfigDirectory=fs.lstatSync(this.configFilePath).isDirectory();} catch (e){ var e=TsCore.createDiagnostic({code:6064,category:ts.DiagnosticCategory.Error,key:"Cannot read project path '{0}'."}, this.configFilePath); return {success: false,errors:[e]};} if (isConfigDirectory){ this.configFileDir= this.configFilePath; this.configFileName=path.join(this.configFilePath,"tsconfig.json");} else { this.configFileDir=path.dirname(this.configFilePath); this.configFileName= this.configFilePath;}Logger.info("Reading config file:", this.configFileName); var a=ts.readConfigFile(this.configFileName, this.readFile); if (a.error){ return {success: false,errors:[a.error]};} var b=a.config;Logger.info("Parsing config file..."); var configParseResult=ts.parseJsonConfigFileContent(b,ts.sys, this.configFileDir); if (configParseResult.errors.length>0){ return {success: false,errors:configParseResult.errors};}configParseResult.fileNames= this.expandFileNames(configParseResult.fileNames, this.configFileDir); if (this.settings.convertFiles=== true){ this.convertProjectFileNames(configParseResult.fileNames, this.configFileDir);} var bundleParser= new BundleParser(); var bundlesParseResult=bundleParser.parseConfigFile(b, this.configFileDir); if (bundlesParseResult.errors.length>0){ return {success: false,errors:bundlesParseResult.errors};}bundlesParseResult.bundles.forEach(function (bundle){bundle.fileNames=_this.expandFileNames(bundle.fileNames,_this.configFileDir);}); var c= this.getSettingsCompilerOptions(this.settings, this.configFileDir); if (c.errors.length>0){ return {success: false,errors:c.errors};} var d=Utils.extend(c.options,configParseResult.options);Logger.info("Compiler options: ",d); return {success: true,compilerOptions:d,fileNames:configParseResult.fileNames,bundles:bundlesParseResult.bundles};};Project.prototype.startRebuildTimer= function (){ if (this.rebuildTimer){clearTimeout(this.rebuildTimer);} this.rebuildTimer=setTimeout(this.onRebuildTimeout,250);};Project.prototype.readFile= function (fileName){ return ts.sys.readFile(fileName);};Project.prototype.getSettingsCompilerOptions= function (jsonSettings,configDirPath){ var a=ts.parseJsonConfigFileContent(jsonSettings,ts.sys,configDirPath); if (a.options.project){ var b=TsCore.createDiagnostic({code:5099,category:ts.DiagnosticCategory.Error,key:"The compiler option '{0}' is not supported in this context."},"--project");a.errors.push(b);} if (a.options.init){ var b=TsCore.createDiagnostic({code:5099,category:ts.DiagnosticCategory.Error,key:"The compiler option '{0}' is not supported in this context."},"--init");a.errors.push(b);} return a;};Project.prototype.expandFileNames= function (files,configDirPath){ var glob= new Glob(); var nonglobFiles=[];Utils.forEach(files, function (file){ if (!glob.hasPattern(file)){nonglobFiles.push(path.normalize(file));}}); var globFiles=glob.expand(files,configDirPath); var normalizedGlobFiles=[];Utils.forEach(globFiles, function (file){normalizedGlobFiles.push(path.normalize(file));}); return _.union(normalizedGlobFiles,nonglobFiles);};Project.prototype.convertProjectFileNames= function (fileNames,configDirPath){ var a=""; try {a=fs.readFileSync(this.configFileName,'utf8'); if (a!==undefined){ var b=JSON.parse(a); var c=[];fileNames.forEach(function (fileName){c.push(path.relative(configDirPath,fileName).replace(/\\/g,"/"));});b["files"]=c;fs.writeFileSync(this.configFileName,JSON.stringify(b,undefined,4));}} catch (e){Logger.log(chalk.yellow("Converting project files failed."));}};Project.prototype.reportBuildStatus= function (buildStatus){ switch (buildStatus){ case ts.ExitStatus.Success:Logger.log(chalk.green("Project build completed successfully.")); break; case ts.ExitStatus.DiagnosticsPresent_OutputsSkipped:Logger.log(chalk.red("Build completed with errors.")); break; case ts.ExitStatus.DiagnosticsPresent_OutputsGenerated:Logger.log(chalk.red("Build completed with errors. "+chalk.italic("Outputs generated."))); break;}};Project.prototype.reportStatistics= function (){ var a= new StatisticsReporter();a.reportTitle("Total build times...");a.reportTime("Pre-build time", this.totalPreBuildTime);a.reportTime("Compiling time", this.totalCompileTime);a.reportTime("Bundling time", this.totalBundleTime);a.reportTime("Build time", this.totalBuildTime);}; return Project;})();exports.Project=Project;function src(configFilePath,settings){ if (configFilePath===undefined&& typeof configFilePath!=='string'){ throw  new Error("Provide a valid directory or file path to the Typescript project configuration json file.");}settings=settings||{};settings.logLevel=settings.logLevel||0;Logger.setLevel(settings.logLevel);Logger.setName("TsProject"); var outputStream= new CompileStream(); var project= new Project(configFilePath,settings);project.build(outputStream); return outputStream;}var tsproject={src:src};module.exports=tsproject;